
Lab_SDcard_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001718  08008124  08008124  00018124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800983c  0800983c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009844  08009844  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800984c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000afc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b68  20000b68  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000109cd  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003169  00000000  00000000  00030aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f80  00000000  00000000  00033c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ba0  00000000  00000000  00034b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000221ad  00000000  00000000  00035738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001598f  00000000  00000000  000578e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf255  00000000  00000000  0006d274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000430c  00000000  00000000  0012c4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001307d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800810c 	.word	0x0800810c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800810c 	.word	0x0800810c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Mount_SD>:
FATFS   *pfs;
DWORD    fre_clust;
uint32_t total, free_space;

void Mount_SD(const TCHAR *path)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  fresult = f_mount(&fs, path, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <Mount_SD+0x24>)
 80005aa:	f006 fb87 	bl	8006cbc <f_mount>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <Mount_SD+0x28>)
 80005b4:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    // TO DO
  }
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000088 	.word	0x20000088
 80005c4:	20000500 	.word	0x20000500

080005c8 <Scan_SD>:
  }
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD(char *pat)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b093      	sub	sp, #76	; 0x4c
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  DIR   dir;
  UINT  i;
  char *path = malloc(20 * sizeof(char));
 80005d0:	2014      	movs	r0, #20
 80005d2:	f007 f8e7 	bl	80077a4 <malloc>
 80005d6:	4603      	mov	r3, r0
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  sprintf(path, "%s", pat);
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4946      	ldr	r1, [pc, #280]	; (80006f8 <Scan_SD+0x130>)
 80005de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80005e0:	f007 f99c 	bl	800791c <siprintf>
  uint8_t index = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  fresult = f_opendir(&dir, path); /* Open the directory */
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80005f0:	4618      	mov	r0, r3
 80005f2:	f006 ff4e 	bl	8007492 <f_opendir>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b40      	ldr	r3, [pc, #256]	; (80006fc <Scan_SD+0x134>)
 80005fc:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK)
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <Scan_SD+0x134>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d16e      	bne.n	80006e4 <Scan_SD+0x11c>
  {
    for (;;)
    {
      fresult = f_readdir(&dir, &fno); /* Read a directory item */
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	493d      	ldr	r1, [pc, #244]	; (8000700 <Scan_SD+0x138>)
 800060c:	4618      	mov	r0, r3
 800060e:	f006 ffd9 	bl	80075c4 <f_readdir>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b39      	ldr	r3, [pc, #228]	; (80006fc <Scan_SD+0x134>)
 8000618:	701a      	strb	r2, [r3, #0]
      if (fresult != FR_OK || fno.fname[0] == 0)
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <Scan_SD+0x134>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d15b      	bne.n	80006da <Scan_SD+0x112>
 8000622:	4b37      	ldr	r3, [pc, #220]	; (8000700 <Scan_SD+0x138>)
 8000624:	7a5b      	ldrb	r3, [r3, #9]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d057      	beq.n	80006da <Scan_SD+0x112>
        break;                         /* Break on error or end of dir */
      if (fno.fattrib & AM_DIR)        /* It is a directory */
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <Scan_SD+0x138>)
 800062c:	7a1b      	ldrb	r3, [r3, #8]
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	2b00      	cmp	r3, #0
 8000634:	d023      	beq.n	800067e <Scan_SD+0xb6>
      {
        if (!(strcmp("SYSTEM~1", fno.fname)))
 8000636:	4933      	ldr	r1, [pc, #204]	; (8000704 <Scan_SD+0x13c>)
 8000638:	4833      	ldr	r0, [pc, #204]	; (8000708 <Scan_SD+0x140>)
 800063a:	f7ff fdc9 	bl	80001d0 <strcmp>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d047      	beq.n	80006d4 <Scan_SD+0x10c>
          continue;
        i = strlen(path);
 8000644:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000646:	f7ff fdcd 	bl	80001e4 <strlen>
 800064a:	63f8      	str	r0, [r7, #60]	; 0x3c
        sprintf(&path[i], "/%s", fno.fname);
 800064c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	4413      	add	r3, r2
 8000652:	4a2c      	ldr	r2, [pc, #176]	; (8000704 <Scan_SD+0x13c>)
 8000654:	492d      	ldr	r1, [pc, #180]	; (800070c <Scan_SD+0x144>)
 8000656:	4618      	mov	r0, r3
 8000658:	f007 f960 	bl	800791c <siprintf>
        fresult = Scan_SD(path); /* Enter the directory */
 800065c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800065e:	f7ff ffb3 	bl	80005c8 <Scan_SD>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <Scan_SD+0x134>)
 8000668:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK)
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <Scan_SD+0x134>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d132      	bne.n	80006d8 <Scan_SD+0x110>
          break;
        path[i] = 0;
 8000672:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000676:	4413      	add	r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e7c3      	b.n	8000606 <Scan_SD+0x3e>
      }
      else
      { /* It is a file. */
        num_max_of_file = index + 1;
 800067e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000682:	3301      	adds	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <Scan_SD+0x148>)
 8000688:	701a      	strb	r2, [r3, #0]
        list_file[index].id   = index + 1;
 800068a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800068e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000692:	3201      	adds	r2, #1
 8000694:	b2d0      	uxtb	r0, r2
 8000696:	4a1f      	ldr	r2, [pc, #124]	; (8000714 <Scan_SD+0x14c>)
 8000698:	2165      	movs	r1, #101	; 0x65
 800069a:	fb01 f303 	mul.w	r3, r1, r3
 800069e:	4413      	add	r3, r2
 80006a0:	4602      	mov	r2, r0
 80006a2:	701a      	strb	r2, [r3, #0]
        memcpy(list_file[index].name, fno.fname, sizeof(fno.fname));
 80006a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006a8:	2265      	movs	r2, #101	; 0x65
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	4a19      	ldr	r2, [pc, #100]	; (8000714 <Scan_SD+0x14c>)
 80006b0:	4413      	add	r3, r2
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <Scan_SD+0x138>)
 80006b6:	3309      	adds	r3, #9
 80006b8:	681c      	ldr	r4, [r3, #0]
 80006ba:	6858      	ldr	r0, [r3, #4]
 80006bc:	6899      	ldr	r1, [r3, #8]
 80006be:	6014      	str	r4, [r2, #0]
 80006c0:	6050      	str	r0, [r2, #4]
 80006c2:	6091      	str	r1, [r2, #8]
 80006c4:	7b1b      	ldrb	r3, [r3, #12]
 80006c6:	7313      	strb	r3, [r2, #12]
        index++;
 80006c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006cc:	3301      	adds	r3, #1
 80006ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80006d2:	e798      	b.n	8000606 <Scan_SD+0x3e>
          continue;
 80006d4:	bf00      	nop
      fresult = f_readdir(&dir, &fno); /* Read a directory item */
 80006d6:	e796      	b.n	8000606 <Scan_SD+0x3e>
          break;
 80006d8:	bf00      	nop
      }
    }
    f_closedir(&dir);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 ff4a 	bl	8007578 <f_closedir>
  }
  free(path);
 80006e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80006e6:	f007 f865 	bl	80077b4 <free>
  return fresult;
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <Scan_SD+0x134>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	374c      	adds	r7, #76	; 0x4c
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08008124 	.word	0x08008124
 80006fc:	20000500 	.word	0x20000500
 8000700:	200004e8 	.word	0x200004e8
 8000704:	200004f1 	.word	0x200004f1
 8000708:	08008128 	.word	0x08008128
 800070c:	08008134 	.word	0x08008134
 8000710:	200009df 	.word	0x200009df
 8000714:	20000508 	.word	0x20000508

08000718 <Read_File>:
    return fresult;
  }
}

FRESULT Read_File(char *name, char *buf)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  /**** check whether the file exists or not ****/
  fresult = f_stat(name, &fno);
 8000722:	491d      	ldr	r1, [pc, #116]	; (8000798 <Read_File+0x80>)
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f006 ff8a 	bl	800763e <f_stat>
 800072a:	4603      	mov	r3, r0
 800072c:	461a      	mov	r2, r3
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <Read_File+0x84>)
 8000730:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <Read_File+0x84>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <Read_File+0x28>
  {
    return fresult;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <Read_File+0x84>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	e027      	b.n	8000790 <Read_File+0x78>
  }

  else
  {
    /* Open file to read */
    fresult = f_open(&fil, name, FA_READ);
 8000740:	2201      	movs	r2, #1
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4816      	ldr	r0, [pc, #88]	; (80007a0 <Read_File+0x88>)
 8000746:	f006 faff 	bl	8006d48 <f_open>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <Read_File+0x84>)
 8000750:	701a      	strb	r2, [r3, #0]

    if (fresult != FR_OK)
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <Read_File+0x84>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <Read_File+0x48>
    {
      return fresult;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <Read_File+0x84>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	e017      	b.n	8000790 <Read_File+0x78>

    /* Read data from the file
     * see the function details for the arguments */

    // char *buffer = malloc(sizeof(f_size(&fil)));
    fresult = f_read(&fil, buf, f_size(&fil), &br);
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <Read_File+0x88>)
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <Read_File+0x8c>)
 8000766:	6839      	ldr	r1, [r7, #0]
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <Read_File+0x88>)
 800076a:	f006 fcab 	bl	80070c4 <f_read>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <Read_File+0x84>)
 8000774:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK)
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <Read_File+0x84>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d106      	bne.n	800078c <Read_File+0x74>
    }

    else
    {
      /* Close file */
      fresult = f_close(&fil);
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <Read_File+0x88>)
 8000780:	f006 fe5d 	bl	800743e <f_close>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <Read_File+0x84>)
 800078a:	701a      	strb	r2, [r3, #0]
      else
      {
        // TO DO
      }
    }
    return fresult;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <Read_File+0x84>)
 800078e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200004e8 	.word	0x200004e8
 800079c:	20000500 	.word	0x20000500
 80007a0:	200002b8 	.word	0x200002b8
 80007a4:	20000504 	.word	0x20000504

080007a8 <bsp_display_init>:
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_display_init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  //Init LCD
  HAL_GPIO_WritePin(BLK_PORT, BLK_PIN, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <bsp_display_init+0x18>)
 80007b2:	f001 fb39 	bl	8001e28 <HAL_GPIO_WritePin>
  ST7789_Init();
 80007b6:	f000 fbbf 	bl	8000f38 <ST7789_Init>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40020400 	.word	0x40020400

080007c4 <bsp_display_text>:

void bsp_display_text(const char *buffer)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	6078      	str	r0, [r7, #4]
  uint16_t x = 10;
 80007cc:	230a      	movs	r3, #10
 80007ce:	81fb      	strh	r3, [r7, #14]
  uint16_t y = 10;
 80007d0:	230a      	movs	r3, #10
 80007d2:	81bb      	strh	r3, [r7, #12]

  for (int i = 0; buffer[i] != '\0'; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	e029      	b.n	800082e <bsp_display_text+0x6a>
  {
    if (buffer[i] == '\n' || buffer[i] == '\r')
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b0a      	cmp	r3, #10
 80007e4:	d005      	beq.n	80007f2 <bsp_display_text+0x2e>
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b0d      	cmp	r3, #13
 80007f0:	d105      	bne.n	80007fe <bsp_display_text+0x3a>
    {
      y += 10;  // New lines
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	330a      	adds	r3, #10
 80007f6:	81bb      	strh	r3, [r7, #12]
      x = 10;   // Reset to head of lines
 80007f8:	230a      	movs	r3, #10
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	e014      	b.n	8000828 <bsp_display_text+0x64>
    }
    else
    {
      ST7789_WriteChar(x, y, buffer[i], Font_7x10, BLACK, WHITE);
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781c      	ldrb	r4, [r3, #0]
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <bsp_display_text+0x80>)
 8000808:	89b9      	ldrh	r1, [r7, #12]
 800080a:	89f8      	ldrh	r0, [r7, #14]
 800080c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000810:	9202      	str	r2, [sp, #8]
 8000812:	2200      	movs	r2, #0
 8000814:	9201      	str	r2, [sp, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4622      	mov	r2, r4
 800081e:	f000 fc67 	bl	80010f0 <ST7789_WriteChar>
      x += 7;  // Increase position of clolumn in 1 char
 8000822:	89fb      	ldrh	r3, [r7, #14]
 8000824:	3307      	adds	r3, #7
 8000826:	81fb      	strh	r3, [r7, #14]
  for (int i = 0; buffer[i] != '\0'; i++)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1cf      	bne.n	80007da <bsp_display_text+0x16>
    }
  }
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	bd90      	pop	{r4, r7, pc}
 8000844:	20000000 	.word	0x20000000

08000848 <bsp_display_text_line>:

void bsp_display_text_line(const char *buffer, uint8_t line, uint8_t column)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af04      	add	r7, sp, #16
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
 8000854:	4613      	mov	r3, r2
 8000856:	70bb      	strb	r3, [r7, #2]
  uint8_t row = line * 10;
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	461a      	mov	r2, r3
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	4413      	add	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
  ST7789_WriteString(column, row, buffer, Font_7x10, BLACK, WHITE);
 8000864:	78bb      	ldrb	r3, [r7, #2]
 8000866:	b298      	uxth	r0, r3
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	b299      	uxth	r1, r3
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <bsp_display_text_line+0x44>)
 800086e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000872:	9202      	str	r2, [sp, #8]
 8000874:	2200      	movs	r2, #0
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	9200      	str	r2, [sp, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	f000 fcb6 	bl	80011f0 <ST7789_WriteString>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000

08000890 <bsp_display_list_file>:

void bsp_display_list_file(manage_file_t list_file[])
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	; 0x70
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  bsp_display_text_line("### LIST OF FILE ON SD CARD ###", 1, 10);
 8000898:	220a      	movs	r2, #10
 800089a:	2101      	movs	r1, #1
 800089c:	482c      	ldr	r0, [pc, #176]	; (8000950 <bsp_display_list_file+0xc0>)
 800089e:	f7ff ffd3 	bl	8000848 <bsp_display_text_line>

  for (uint8_t i = 0; i < 10; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80008a8:	e043      	b.n	8000932 <bsp_display_list_file+0xa2>
  {
    if (list_file[i].id != 0)
 80008aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008ae:	2265      	movs	r2, #101	; 0x65
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d03e      	beq.n	800093c <bsp_display_list_file+0xac>
    {
      // Display index and name of files in list_file
      char buffer[100];
      sprintf(buffer, "%d.", list_file[i].id);
 80008be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008c2:	2265      	movs	r2, #101	; 0x65
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	491f      	ldr	r1, [pc, #124]	; (8000954 <bsp_display_list_file+0xc4>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f007 f820 	bl	800791c <siprintf>
      bsp_display_text_line(buffer, list_file[i].id + 2, 10);
 80008dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008e0:	2265      	movs	r2, #101	; 0x65
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3302      	adds	r3, #2
 80008ee:	b2d9      	uxtb	r1, r3
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	220a      	movs	r2, #10
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffa6 	bl	8000848 <bsp_display_text_line>
      bsp_display_text_line(list_file[i].name, list_file[i].id + 2, 31);
 80008fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000900:	2265      	movs	r2, #101	; 0x65
 8000902:	fb02 f303 	mul.w	r3, r2, r3
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	1c58      	adds	r0, r3, #1
 800090c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000910:	2265      	movs	r2, #101	; 0x65
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3302      	adds	r3, #2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	221f      	movs	r2, #31
 8000922:	4619      	mov	r1, r3
 8000924:	f7ff ff90 	bl	8000848 <bsp_display_text_line>
  for (uint8_t i = 0; i < 10; i++)
 8000928:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800092c:	3301      	adds	r3, #1
 800092e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000932:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000936:	2b09      	cmp	r3, #9
 8000938:	d9b7      	bls.n	80008aa <bsp_display_list_file+0x1a>
 800093a:	e000      	b.n	800093e <bsp_display_list_file+0xae>
    }
    else
    {
      break;
 800093c:	bf00      	nop
    }
  }

  bsp_display_text_line("###### END OF LIST FILE #######", 14, 10);
 800093e:	220a      	movs	r2, #10
 8000940:	210e      	movs	r1, #14
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <bsp_display_list_file+0xc8>)
 8000944:	f7ff ff80 	bl	8000848 <bsp_display_text_line>
}
 8000948:	bf00      	nop
 800094a:	3770      	adds	r7, #112	; 0x70
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08008140 	.word	0x08008140
 8000954:	08008160 	.word	0x08008160
 8000958:	08008164 	.word	0x08008164

0800095c <bsp_display_index_choose_file>:

void bsp_display_index_choose_file(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af04      	add	r7, sp, #16
  // char buffer[100];
  // sprintf(buffer, "%d ", index_file_to_read);
  ST7789_WriteString(60, 230, "                                    ", Font_11x18, BLUE, WHITE);
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <bsp_display_index_choose_file+0x58>)
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	9202      	str	r2, [sp, #8]
 800096a:	221f      	movs	r2, #31
 800096c:	9201      	str	r2, [sp, #4]
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	9200      	str	r2, [sp, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <bsp_display_index_choose_file+0x5c>)
 8000976:	21e6      	movs	r1, #230	; 0xe6
 8000978:	203c      	movs	r0, #60	; 0x3c
 800097a:	f000 fc39 	bl	80011f0 <ST7789_WriteString>
  ST7789_WriteString(60, 230, list_file[index_file_to_read - 1].name, Font_11x18, BLUE, WHITE);
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <bsp_display_index_choose_file+0x60>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	3b01      	subs	r3, #1
 8000984:	2265      	movs	r2, #101	; 0x65
 8000986:	fb02 f303 	mul.w	r3, r2, r3
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <bsp_display_index_choose_file+0x64>)
 800098c:	4413      	add	r3, r2
 800098e:	1c59      	adds	r1, r3, #1
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <bsp_display_index_choose_file+0x58>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	9202      	str	r2, [sp, #8]
 8000998:	221f      	movs	r2, #31
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	9200      	str	r2, [sp, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	460a      	mov	r2, r1
 80009a4:	21e6      	movs	r1, #230	; 0xe6
 80009a6:	203c      	movs	r0, #60	; 0x3c
 80009a8:	f000 fc22 	bl	80011f0 <ST7789_WriteString>
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	08008184 	.word	0x08008184
 80009bc:	200009de 	.word	0x200009de
 80009c0:	20000508 	.word	0x20000508

080009c4 <bsp_display_clear>:

void bsp_display_clear(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  ST7789_Fill_Color(WHITE);
 80009c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009cc:	f000 fb52 	bl	8001074 <ST7789_Fill_Color>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <bsp_display_title_choose_file>:

void bsp_display_title_choose_file(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af04      	add	r7, sp, #16
   ST7789_WriteString(40, 200, "CHOOSE FILE:", Font_11x18, BLACK, WHITE);
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <bsp_display_title_choose_file+0x28>)
 80009dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e0:	9202      	str	r2, [sp, #8]
 80009e2:	2200      	movs	r2, #0
 80009e4:	9201      	str	r2, [sp, #4]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	9200      	str	r2, [sp, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <bsp_display_title_choose_file+0x2c>)
 80009ee:	21c8      	movs	r1, #200	; 0xc8
 80009f0:	2028      	movs	r0, #40	; 0x28
 80009f2:	f000 fbfd 	bl	80011f0 <ST7789_WriteString>
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000008 	.word	0x20000008
 8000a00:	080081ac 	.word	0x080081ac

08000a04 <bsp_sd_card_mount>:
manage_file_t list_file[10];
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_sd_card_mount(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  Mount_SD("");
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <bsp_sd_card_mount+0x10>)
 8000a0a:	f7ff fdc7 	bl	800059c <Mount_SD>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	080081bc 	.word	0x080081bc

08000a18 <bsp_sd_card_read_file_txt>:
{
  Unmount_SD("");
}

void bsp_sd_card_read_file_txt(char *name, char *buf)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  Read_File(name, buf);
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fe77 	bl	8000718 <Read_File>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <bsp_sd_card_scan_file>:

void bsp_sd_card_scan_file(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  Scan_SD("");
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <bsp_sd_card_scan_file+0x10>)
 8000a3a:	f7ff fdc5 	bl	80005c8 <Scan_SD>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	080081bc 	.word	0x080081bc

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fe86 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f80e 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f8cc 	bl	8000bf0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a58:	f000 f894 	bl	8000b84 <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 8000a5c:	f000 f872 	bl	8000b44 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000a60:	f004 f984 	bl	8004d6c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000a64:	f000 fe04 	bl	8001670 <system_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  system_process();
 8000a68:	f000 fe20 	bl	80016ac <system_process>
 8000a6c:	e7fc      	b.n	8000a68 <main+0x20>
	...

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 ff6c 	bl	800795c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ae4:	2348      	movs	r3, #72	; 0x48
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000aec:	2303      	movs	r3, #3
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 f9d5 	bl	8001ea4 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f90c 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fc36 	bl	8002394 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 f8f5 	bl	8000d1c <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	; 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b4a:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <MX_SDIO_SD_Init+0x3c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b6e:	220a      	movs	r2, #10
 8000b70:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	200008fc 	.word	0x200008fc
 8000b80:	40012c00 	.word	0x40012c00

08000b84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd6:	f002 fff5 	bl	8003bc4 <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be0:	f000 f89c 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000980 	.word	0x20000980
 8000bec:	40013000 	.word	0x40013000

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a39      	ldr	r2, [pc, #228]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <MX_GPIO_Init+0x124>)
 8000c9a:	f001 f8c5 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_CTR_Pin JOY_A_Pin JOY_B_Pin JOY_C_Pin
                           JOY_D_Pin */
  GPIO_InitStruct.Pin = JOY_CTR_Pin|JOY_A_Pin|JOY_B_Pin|JOY_C_Pin
 8000c9e:	f242 03f0 	movw	r3, #8432	; 0x20f0
 8000ca2:	617b      	str	r3, [r7, #20]
                          |JOY_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4818      	ldr	r0, [pc, #96]	; (8000d18 <MX_GPIO_Init+0x128>)
 8000cb6:	f000 ff1b 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin|LCD_DC_Pin;
 8000cba:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <MX_GPIO_Init+0x124>)
 8000cd4:	f000 ff0c 	bl	8001af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f000 feae 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f000 fec7 	bl	8001a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2101      	movs	r1, #1
 8000cec:	2017      	movs	r0, #23
 8000cee:	f000 fea6 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cf2:	2017      	movs	r0, #23
 8000cf4:	f000 febf 	bl	8001a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	2028      	movs	r0, #40	; 0x28
 8000cfe:	f000 fe9e 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d02:	2028      	movs	r0, #40	; 0x28
 8000d04:	f000 feb7 	bl	8001a76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020800 	.word	0x40020800

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000d32:	2200      	movs	r2, #0
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <ST7789_WriteCommand+0x40>)
 8000d38:	f001 f876 	bl	8001e28 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <ST7789_WriteCommand+0x40>)
 8000d44:	f001 f870 	bl	8001e28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000d48:	1df9      	adds	r1, r7, #7
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <ST7789_WriteCommand+0x44>)
 8000d52:	f002 ffc0 	bl	8003cd6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000d56:	2201      	movs	r2, #1
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <ST7789_WriteCommand+0x40>)
 8000d5c:	f001 f864 	bl	8001e28 <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	20000980 	.word	0x20000980

08000d70 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <ST7789_WriteData+0x68>)
 8000d80:	f001 f852 	bl	8001e28 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <ST7789_WriteData+0x68>)
 8000d8c:	f001 f84c 	bl	8001e28 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000d90:	e015      	b.n	8000dbe <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	bf28      	it	cs
 8000d9c:	4613      	movcs	r3, r2
 8000d9e:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000da0:	89fa      	ldrh	r2, [r7, #14]
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <ST7789_WriteData+0x6c>)
 8000daa:	f002 ff94 	bl	8003cd6 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8000dae:	89fb      	ldrh	r3, [r7, #14]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1e6      	bne.n	8000d92 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <ST7789_WriteData+0x68>)
 8000dca:	f001 f82d 	bl	8001e28 <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	20000980 	.word	0x20000980

08000de0 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000dea:	2200      	movs	r2, #0
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <ST7789_WriteSmallData+0x40>)
 8000df0:	f001 f81a 	bl	8001e28 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <ST7789_WriteSmallData+0x40>)
 8000dfc:	f001 f814 	bl	8001e28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000e00:	1df9      	adds	r1, r7, #7
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	2201      	movs	r2, #1
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <ST7789_WriteSmallData+0x44>)
 8000e0a:	f002 ff64 	bl	8003cd6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <ST7789_WriteSmallData+0x40>)
 8000e14:	f001 f808 	bl	8001e28 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400
 8000e24:	20000980 	.word	0x20000980

08000e28 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000e32:	2036      	movs	r0, #54	; 0x36
 8000e34:	f7ff ff78 	bl	8000d28 <ST7789_WriteCommand>
	switch (m) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d81a      	bhi.n	8000e74 <ST7789_SetRotation+0x4c>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <ST7789_SetRotation+0x1c>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e5d 	.word	0x08000e5d
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e6d 	.word	0x08000e6d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000e54:	20c0      	movs	r0, #192	; 0xc0
 8000e56:	f7ff ffc3 	bl	8000de0 <ST7789_WriteSmallData>
		break;
 8000e5a:	e00c      	b.n	8000e76 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000e5c:	20a0      	movs	r0, #160	; 0xa0
 8000e5e:	f7ff ffbf 	bl	8000de0 <ST7789_WriteSmallData>
		break;
 8000e62:	e008      	b.n	8000e76 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ffbb 	bl	8000de0 <ST7789_WriteSmallData>
		break;
 8000e6a:	e004      	b.n	8000e76 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000e6c:	2060      	movs	r0, #96	; 0x60
 8000e6e:	f7ff ffb7 	bl	8000de0 <ST7789_WriteSmallData>
		break;
 8000e72:	e000      	b.n	8000e76 <ST7789_SetRotation+0x4e>
	default:
		break;
 8000e74:	bf00      	nop
	}
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop

08000e80 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	4603      	mov	r3, r0
 8000e94:	80bb      	strh	r3, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4824      	ldr	r0, [pc, #144]	; (8000f34 <ST7789_SetAddressWindow+0xb4>)
 8000ea4:	f000 ffc0 	bl	8001e28 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	82fb      	strh	r3, [r7, #22]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	827b      	strh	r3, [r7, #18]
 8000eb4:	883b      	ldrh	r3, [r7, #0]
 8000eb6:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000eb8:	202a      	movs	r0, #42	; 0x2a
 8000eba:	f7ff ff35 	bl	8000d28 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000ebe:	8afb      	ldrh	r3, [r7, #22]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	733b      	strb	r3, [r7, #12]
 8000ec8:	8afb      	ldrh	r3, [r7, #22]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	737b      	strb	r3, [r7, #13]
 8000ece:	8abb      	ldrh	r3, [r7, #20]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73bb      	strb	r3, [r7, #14]
 8000ed8:	8abb      	ldrh	r3, [r7, #20]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff43 	bl	8000d70 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000eea:	202b      	movs	r0, #43	; 0x2b
 8000eec:	f7ff ff1c 	bl	8000d28 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	723b      	strb	r3, [r7, #8]
 8000efa:	8a7b      	ldrh	r3, [r7, #18]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	727b      	strb	r3, [r7, #9]
 8000f00:	8a3b      	ldrh	r3, [r7, #16]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	72bb      	strb	r3, [r7, #10]
 8000f0a:	8a3b      	ldrh	r3, [r7, #16]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff2a 	bl	8000d70 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000f1c:	202c      	movs	r0, #44	; 0x2c
 8000f1e:	f7ff ff03 	bl	8000d28 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000f22:	2201      	movs	r2, #1
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <ST7789_SetAddressWindow+0xb4>)
 8000f28:	f000 ff7e 	bl	8001e28 <HAL_GPIO_WritePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	40020400 	.word	0x40020400

08000f38 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8000f3e:	2019      	movs	r0, #25
 8000f40:	f000 fc7e 	bl	8001840 <HAL_Delay>
    ST7789_RST_Clr();
 8000f44:	2200      	movs	r2, #0
 8000f46:	2104      	movs	r1, #4
 8000f48:	4846      	ldr	r0, [pc, #280]	; (8001064 <ST7789_Init+0x12c>)
 8000f4a:	f000 ff6d 	bl	8001e28 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8000f4e:	2019      	movs	r0, #25
 8000f50:	f000 fc76 	bl	8001840 <HAL_Delay>
    ST7789_RST_Set();
 8000f54:	2201      	movs	r2, #1
 8000f56:	2104      	movs	r1, #4
 8000f58:	4842      	ldr	r0, [pc, #264]	; (8001064 <ST7789_Init+0x12c>)
 8000f5a:	f000 ff65 	bl	8001e28 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f000 fc6e 	bl	8001840 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000f64:	203a      	movs	r0, #58	; 0x3a
 8000f66:	f7ff fedf 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000f6a:	2055      	movs	r0, #85	; 0x55
 8000f6c:	f7ff ff38 	bl	8000de0 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000f70:	20b2      	movs	r0, #178	; 0xb2
 8000f72:	f7ff fed9 	bl	8000d28 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000f76:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <ST7789_Init+0x130>)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f80:	6018      	str	r0, [r3, #0]
 8000f82:	3304      	adds	r3, #4
 8000f84:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff feef 	bl	8000d70 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000f92:	2002      	movs	r0, #2
 8000f94:	f7ff ff48 	bl	8000e28 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000f98:	20b7      	movs	r0, #183	; 0xb7
 8000f9a:	f7ff fec5 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000f9e:	2035      	movs	r0, #53	; 0x35
 8000fa0:	f7ff ff1e 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000fa4:	20bb      	movs	r0, #187	; 0xbb
 8000fa6:	f7ff febf 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000faa:	2019      	movs	r0, #25
 8000fac:	f7ff ff18 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000fb0:	20c0      	movs	r0, #192	; 0xc0
 8000fb2:	f7ff feb9 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000fb6:	202c      	movs	r0, #44	; 0x2c
 8000fb8:	f7ff ff12 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000fbc:	20c2      	movs	r0, #194	; 0xc2
 8000fbe:	f7ff feb3 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ff0c 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000fc8:	20c3      	movs	r0, #195	; 0xc3
 8000fca:	f7ff fead 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000fce:	2012      	movs	r0, #18
 8000fd0:	f7ff ff06 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000fd4:	20c4      	movs	r0, #196	; 0xc4
 8000fd6:	f7ff fea7 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000fda:	2020      	movs	r0, #32
 8000fdc:	f7ff ff00 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000fe0:	20c6      	movs	r0, #198	; 0xc6
 8000fe2:	f7ff fea1 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f7ff fefa 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000fec:	20d0      	movs	r0, #208	; 0xd0
 8000fee:	f7ff fe9b 	bl	8000d28 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000ff2:	20a4      	movs	r0, #164	; 0xa4
 8000ff4:	f7ff fef4 	bl	8000de0 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000ff8:	20a1      	movs	r0, #161	; 0xa1
 8000ffa:	f7ff fef1 	bl	8000de0 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000ffe:	20e0      	movs	r0, #224	; 0xe0
 8001000:	f7ff fe92 	bl	8000d28 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <ST7789_Init+0x134>)
 8001006:	f107 0410 	add.w	r4, r7, #16
 800100a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100c:	c407      	stmia	r4!, {r0, r1, r2}
 800100e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	210e      	movs	r1, #14
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff feaa 	bl	8000d70 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800101c:	20e1      	movs	r0, #225	; 0xe1
 800101e:	f7ff fe83 	bl	8000d28 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <ST7789_Init+0x138>)
 8001024:	463c      	mov	r4, r7
 8001026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001028:	c407      	stmia	r4!, {r0, r1, r2}
 800102a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800102c:	463b      	mov	r3, r7
 800102e:	210e      	movs	r1, #14
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fe9d 	bl	8000d70 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001036:	2021      	movs	r0, #33	; 0x21
 8001038:	f7ff fe76 	bl	8000d28 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800103c:	2011      	movs	r0, #17
 800103e:	f7ff fe73 	bl	8000d28 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001042:	2013      	movs	r0, #19
 8001044:	f7ff fe70 	bl	8000d28 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001048:	2029      	movs	r0, #41	; 0x29
 800104a:	f7ff fe6d 	bl	8000d28 <ST7789_WriteCommand>

	HAL_Delay(50);
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f000 fbf6 	bl	8001840 <HAL_Delay>
	ST7789_Fill_Color(WHITE);				//	Fill with Black.
 8001054:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001058:	f000 f80c 	bl	8001074 <ST7789_Fill_Color>
}
 800105c:	bf00      	nop
 800105e:	372c      	adds	r7, #44	; 0x2c
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40020400 	.word	0x40020400
 8001068:	080081c0 	.word	0x080081c0
 800106c:	080081c8 	.word	0x080081c8
 8001070:	080081d8 	.word	0x080081d8

08001074 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800107e:	f240 133f 	movw	r3, #319	; 0x13f
 8001082:	22ef      	movs	r2, #239	; 0xef
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fefa 	bl	8000e80 <ST7789_SetAddressWindow>
	ST7789_Select();
 800108c:	2200      	movs	r2, #0
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <ST7789_Fill_Color+0x78>)
 8001092:	f000 fec9 	bl	8001e28 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8001096:	2300      	movs	r3, #0
 8001098:	81fb      	strh	r3, [r7, #14]
 800109a:	e01a      	b.n	80010d2 <ST7789_Fill_Color+0x5e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 800109c:	2300      	movs	r3, #0
 800109e:	81bb      	strh	r3, [r7, #12]
 80010a0:	e010      	b.n	80010c4 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	723b      	strb	r3, [r7, #8]
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2102      	movs	r1, #2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe59 	bl	8000d70 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80010be:	89bb      	ldrh	r3, [r7, #12]
 80010c0:	3301      	adds	r3, #1
 80010c2:	81bb      	strh	r3, [r7, #12]
 80010c4:	89bb      	ldrh	r3, [r7, #12]
 80010c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010ca:	d3ea      	bcc.n	80010a2 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	3301      	adds	r3, #1
 80010d0:	81fb      	strh	r3, [r7, #14]
 80010d2:	89fb      	ldrh	r3, [r7, #14]
 80010d4:	2bef      	cmp	r3, #239	; 0xef
 80010d6:	d9e1      	bls.n	800109c <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 80010d8:	2201      	movs	r2, #1
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <ST7789_Fill_Color+0x78>)
 80010de:	f000 fea3 	bl	8001e28 <HAL_GPIO_WritePin>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020400 	.word	0x40020400

080010f0 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80010f0:	b082      	sub	sp, #8
 80010f2:	b590      	push	{r4, r7, lr}
 80010f4:	b089      	sub	sp, #36	; 0x24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	460b      	mov	r3, r1
 8001100:	80bb      	strh	r3, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001106:	2200      	movs	r2, #0
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4838      	ldr	r0, [pc, #224]	; (80011ec <ST7789_WriteChar+0xfc>)
 800110c:	f000 fe8c 	bl	8001e28 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001110:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001114:	b29a      	uxth	r2, r3
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	3b01      	subs	r3, #1
 800111e:	b29c      	uxth	r4, r3
 8001120:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001124:	b29a      	uxth	r2, r3
 8001126:	88bb      	ldrh	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	b29b      	uxth	r3, r3
 800112c:	3b01      	subs	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	88b9      	ldrh	r1, [r7, #4]
 8001132:	88f8      	ldrh	r0, [r7, #6]
 8001134:	4622      	mov	r2, r4
 8001136:	f7ff fea3 	bl	8000e80 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e043      	b.n	80011c8 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8001140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	3b20      	subs	r3, #32
 8001146:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	4619      	mov	r1, r3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	440b      	add	r3, r1
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	e029      	b.n	80011b6 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00e      	beq.n	8001190 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001172:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b29b      	uxth	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	743b      	strb	r3, [r7, #16]
 800117c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800117e:	b2db      	uxtb	r3, r3
 8001180:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fdf1 	bl	8000d70 <ST7789_WriteData>
 800118e:	e00f      	b.n	80011b0 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001190:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	733b      	strb	r3, [r7, #12]
 800119c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2102      	movs	r1, #2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fde0 	bl	8000d70 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011ba:	461a      	mov	r2, r3
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	4293      	cmp	r3, r2
 80011c0:	d3cf      	bcc.n	8001162 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011cc:	461a      	mov	r2, r3
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d3b5      	bcc.n	8001140 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80011d4:	2201      	movs	r2, #1
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <ST7789_WriteChar+0xfc>)
 80011da:	f000 fe25 	bl	8001e28 <HAL_GPIO_WritePin>
}
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011e8:	b002      	add	sp, #8
 80011ea:	4770      	bx	lr
 80011ec:	40020400 	.word	0x40020400

080011f0 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80011f0:	b082      	sub	sp, #8
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af04      	add	r7, sp, #16
 80011f8:	603a      	str	r2, [r7, #0]
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	4603      	mov	r3, r0
 80011fe:	80fb      	strh	r3, [r7, #6]
 8001200:	460b      	mov	r3, r1
 8001202:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001204:	2200      	movs	r2, #0
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4822      	ldr	r0, [pc, #136]	; (8001294 <ST7789_WriteString+0xa4>)
 800120a:	f000 fe0d 	bl	8001e28 <HAL_GPIO_WritePin>
	while (*str) {
 800120e:	e02e      	b.n	800126e <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	7d3a      	ldrb	r2, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	2bef      	cmp	r3, #239	; 0xef
 8001218:	dd14      	ble.n	8001244 <ST7789_WriteString+0x54>
			x = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800121e:	7d7b      	ldrb	r3, [r7, #21]
 8001220:	b29a      	uxth	r2, r3
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001228:	88bb      	ldrh	r3, [r7, #4]
 800122a:	7d7a      	ldrb	r2, [r7, #21]
 800122c:	4413      	add	r3, r2
 800122e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001232:	da21      	bge.n	8001278 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d103      	bne.n	8001244 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	603b      	str	r3, [r7, #0]
				continue;
 8001242:	e014      	b.n	800126e <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	88b9      	ldrh	r1, [r7, #4]
 800124a:	88f8      	ldrh	r0, [r7, #6]
 800124c:	8c3b      	ldrh	r3, [r7, #32]
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	8bbb      	ldrh	r3, [r7, #28]
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f7ff ff49 	bl	80010f0 <ST7789_WriteChar>
		x += font.width;
 800125e:	7d3b      	ldrb	r3, [r7, #20]
 8001260:	b29a      	uxth	r2, r3
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	4413      	add	r3, r2
 8001266:	80fb      	strh	r3, [r7, #6]
		str++;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1cc      	bne.n	8001210 <ST7789_WriteString+0x20>
 8001276:	e000      	b.n	800127a <ST7789_WriteString+0x8a>
				break;
 8001278:	bf00      	nop
	}
	ST7789_UnSelect();
 800127a:	2201      	movs	r2, #1
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <ST7789_WriteString+0xa4>)
 8001280:	f000 fdd2 	bl	8001e28 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800128e:	b002      	add	sp, #8
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40020400 	.word	0x40020400

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <HAL_SD_MspInit+0xd0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d152      	bne.n	80013b0 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_SD_MspInit+0xd4>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <HAL_SD_MspInit+0xd4>)
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_SD_MspInit+0xd4>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_SD_MspInit+0xd4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_SD_MspInit+0xd4>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_SD_MspInit+0xd4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_SD_MspInit+0xd4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_SD_MspInit+0xd4>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_SD_MspInit+0xd4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800135e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001370:	230c      	movs	r3, #12
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <HAL_SD_MspInit+0xd8>)
 800137c:	f000 fbb8 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001380:	2304      	movs	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001390:	230c      	movs	r3, #12
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	480a      	ldr	r0, [pc, #40]	; (80013c4 <HAL_SD_MspInit+0xdc>)
 800139c:	f000 fba8 	bl	8001af0 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2031      	movs	r0, #49	; 0x31
 80013a6:	f000 fb4a 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80013aa:	2031      	movs	r0, #49	; 0x31
 80013ac:	f000 fb63 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40012c00 	.word	0x40012c00
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00

080013c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <HAL_SPI_MspInit+0xd0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d151      	bne.n	800148e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_SPI_MspInit+0xd4>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a2a      	ldr	r2, [pc, #168]	; (800149c <HAL_SPI_MspInit+0xd4>)
 80013f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_SPI_MspInit+0xd4>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_SPI_MspInit+0xd4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a23      	ldr	r2, [pc, #140]	; (800149c <HAL_SPI_MspInit+0xd4>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_SPI_MspInit+0xd4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_SPI_MspInit+0xd4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <HAL_SPI_MspInit+0xd4>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HAL_SPI_MspInit+0xd4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143e:	23c0      	movs	r3, #192	; 0xc0
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144e:	2305      	movs	r3, #5
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4811      	ldr	r0, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0xd8>)
 800145a:	f000 fb49 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800145e:	2308      	movs	r3, #8
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800146e:	2305      	movs	r3, #5
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 800147a:	f000 fb39 	bl	8001af0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2023      	movs	r0, #35	; 0x23
 8001484:	f000 fadb 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001488:	2023      	movs	r0, #35	; 0x23
 800148a:	f000 faf4 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40013000 	.word	0x40013000
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 f984 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_A_Pin);
 8001500:	2010      	movs	r0, #16
 8001502:	f000 fcab 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}

0800150a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_B_Pin);
 800150e:	2020      	movs	r0, #32
 8001510:	f000 fca4 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_C_Pin);
 8001514:	2040      	movs	r0, #64	; 0x40
 8001516:	f000 fca1 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_D_Pin);
 800151a:	2080      	movs	r0, #128	; 0x80
 800151c:	f000 fc9e 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <SPI1_IRQHandler+0x10>)
 800152a:	f002 fd11 	bl	8003f50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000980 	.word	0x20000980

08001538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_CTR_Pin);
 800153c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001540:	f000 fc8c 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <SDIO_IRQHandler+0x10>)
 800154e:	f001 fd21 	bl	8002f94 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200008fc 	.word	0x200008fc

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f006 f9fe 	bl	800798c <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20020000 	.word	0x20020000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	200009d8 	.word	0x200009d8
 80015c4:	20000b68 	.word	0x20000b68

080015c8 <sys_process_state_menu>:
static void sys_process_state_menu(void);
static void sys_process_state_display_file(void);

/* Function definitions ----------------------------------------------- */
static void sys_process_state_menu(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  bsp_display_clear();
 80015cc:	f7ff f9fa 	bl	80009c4 <bsp_display_clear>
  bsp_display_list_file(list_file);
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <sys_process_state_menu+0x1c>)
 80015d2:	f7ff f95d 	bl	8000890 <bsp_display_list_file>
  bsp_display_title_choose_file();
 80015d6:	f7ff f9fd 	bl	80009d4 <bsp_display_title_choose_file>
  bsp_display_index_choose_file();
 80015da:	f7ff f9bf 	bl	800095c <bsp_display_index_choose_file>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000508 	.word	0x20000508

080015e8 <sys_process_state_display_file>:

static void sys_process_state_display_file(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 10; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	e030      	b.n	8001656 <sys_process_state_display_file+0x6e>
  {
    // Check if the file ID is 0, indicating the end of the list
    if (list_file[i].id == 0)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <sys_process_state_display_file+0x80>)
 80015f8:	2165      	movs	r1, #101	; 0x65
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d02b      	beq.n	800165e <sys_process_state_display_file+0x76>
    {
      break;
    }

    if (list_file[i].id == index_file_to_read)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <sys_process_state_display_file+0x80>)
 800160a:	2165      	movs	r1, #101	; 0x65
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <sys_process_state_display_file+0x84>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d119      	bne.n	8001650 <sys_process_state_display_file+0x68>
    {
      // Display the text from the file
      bsp_display_clear();
 800161c:	f7ff f9d2 	bl	80009c4 <bsp_display_clear>
      char *buf = calloc(1000 * sizeof(char), ' ');
 8001620:	2120      	movs	r1, #32
 8001622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001626:	f006 f89f 	bl	8007768 <calloc>
 800162a:	4603      	mov	r3, r0
 800162c:	603b      	str	r3, [r7, #0]
      bsp_sd_card_read_file_txt(list_file[i].name, buf);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2265      	movs	r2, #101	; 0x65
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <sys_process_state_display_file+0x80>)
 8001638:	4413      	add	r3, r2
 800163a:	3301      	adds	r3, #1
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f9ea 	bl	8000a18 <bsp_sd_card_read_file_txt>
     // bsp_sd_card_read_file_txt(lab2, buf);
      bsp_display_text(buf);
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff f8bd 	bl	80007c4 <bsp_display_text>
      free(buf);
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f006 f8b2 	bl	80077b4 <free>
  for (uint8_t i = 0; i < 10; i++)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	3301      	adds	r3, #1
 8001654:	71fb      	strb	r3, [r7, #7]
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b09      	cmp	r3, #9
 800165a:	d9cb      	bls.n	80015f4 <sys_process_state_display_file+0xc>
    }
  }
}
 800165c:	e000      	b.n	8001660 <sys_process_state_display_file+0x78>
      break;
 800165e:	bf00      	nop
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000508 	.word	0x20000508
 800166c:	200009de 	.word	0x200009de

08001670 <system_init>:

void system_init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  //Init LCD
  bsp_display_init();
 8001674:	f7ff f898 	bl	80007a8 <bsp_display_init>

  //Mount sd card and scan to list_file
  bsp_sd_card_mount();
 8001678:	f7ff f9c4 	bl	8000a04 <bsp_sd_card_mount>
  bsp_sd_card_scan_file();
 800167c:	f7ff f9da 	bl	8000a34 <bsp_sd_card_scan_file>
  bsp_display_list_file(list_file);
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <system_init+0x2c>)
 8001682:	f7ff f905 	bl	8000890 <bsp_display_list_file>

  // Init system variable
  detect_state_change = true;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <system_init+0x30>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
  sys_state = STATE_MENU;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <system_init+0x34>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
  index_file_to_read = 1;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <system_init+0x38>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000508 	.word	0x20000508
 80016a0:	200009dd 	.word	0x200009dd
 80016a4:	200009dc 	.word	0x200009dc
 80016a8:	200009de 	.word	0x200009de

080016ac <system_process>:

void system_process(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    if(detect_state_change)
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <system_process+0x30>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00f      	beq.n	80016d8 <system_process+0x2c>
    {
      // Process based on the current system state
      switch (sys_state)
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <system_process+0x34>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <system_process+0x1a>
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d003      	beq.n	80016cc <system_process+0x20>
      case STATE_DISPLAY_FILE:
      {
       sys_process_state_display_file();
        break;
      }
      default: break;
 80016c4:	e005      	b.n	80016d2 <system_process+0x26>
        sys_process_state_menu();
 80016c6:	f7ff ff7f 	bl	80015c8 <sys_process_state_menu>
        break;
 80016ca:	e002      	b.n	80016d2 <system_process+0x26>
       sys_process_state_display_file();
 80016cc:	f7ff ff8c 	bl	80015e8 <sys_process_state_display_file>
        break;
 80016d0:	bf00      	nop
      }
      detect_state_change = false;
 80016d2:	4b02      	ldr	r3, [pc, #8]	; (80016dc <system_process+0x30>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
    }
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200009dd 	.word	0x200009dd
 80016e0:	200009dc 	.word	0x200009dc

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800170e:	490e      	ldr	r1, [pc, #56]	; (8001748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001724:	4c0b      	ldr	r4, [pc, #44]	; (8001754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001732:	f7ff ffd7 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001736:	f006 f92f 	bl	8007998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff f985 	bl	8000a48 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800174c:	0800984c 	.word	0x0800984c
  ldr r2, =_sbss
 8001750:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001754:	20000b68 	.word	0x20000b68

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f94f 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fd82 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f967 	bl	8001a92 <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 f92f 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000010 	.word	0x20000010
 80017f8:	20000018 	.word	0x20000018
 80017fc:	20000014 	.word	0x20000014

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000018 	.word	0x20000018
 8001824:	200009e0 	.word	0x200009e0

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200009e0 	.word	0x200009e0

08001840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff ffee 	bl	8001828 <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d005      	beq.n	8001866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_Delay+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001866:	bf00      	nop
 8001868:	f7ff ffde 	bl	8001828 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8f7      	bhi.n	8001868 <HAL_Delay+0x28>
  {
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000018 	.word	0x20000018

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <__NVIC_EnableIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff29 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff3e 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff8e 	bl	800197c <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff31 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d004      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e00c      	b.n	8001ae2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2205      	movs	r2, #5
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e16b      	b.n	8001de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 815a 	bne.w	8001dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80b4 	beq.w	8001dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x314>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02b      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x318>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d025      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x31c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01f      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x320>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x216>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x212>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x32c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4b      	ldr	r2, [pc, #300]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x20a>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00e      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	e00c      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e00a      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5a:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f ae90 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40021400 	.word	0x40021400
 8001e1c:	40021800 	.word	0x40021800
 8001e20:	40021c00 	.word	0x40021c00
 8001e24:	40013c00 	.word	0x40013c00

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f806 	bl	8001e8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e267      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d075      	beq.n	8001fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec2:	4b88      	ldr	r3, [pc, #544]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4b85      	ldr	r3, [pc, #532]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d112      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	4b7e      	ldr	r3, [pc, #504]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d05b      	beq.n	8001fac <HAL_RCC_OscConfig+0x108>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d157      	bne.n	8001fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e242      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x74>
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x98>
 8001f22:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6f      	ldr	r2, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b6d      	ldr	r3, [pc, #436]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6c      	ldr	r2, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f3c:	4b69      	ldr	r3, [pc, #420]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a68      	ldr	r2, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a65      	ldr	r2, [pc, #404]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fc64 	bl	8001828 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fc60 	bl	8001828 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e207      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xc0>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fc50 	bl	8001828 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fc4c 	bl	8001828 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1f3      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0xe8>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fba:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x152>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1c7      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4937      	ldr	r1, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_OscConfig+0x244>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff fc05 	bl	8001828 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff fc01 	bl	8001828 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1a8      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4925      	ldr	r1, [pc, #148]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_OscConfig+0x244>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fbe4 	bl	8001828 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff fbe0 	bl	8001828 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e187      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d036      	beq.n	80020fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_RCC_OscConfig+0x248>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff fbc4 	bl	8001828 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a4:	f7ff fbc0 	bl	8001828 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e167      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x240>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x200>
 80020c2:	e01b      	b.n	80020fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_OscConfig+0x248>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fbad 	bl	8001828 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	e00e      	b.n	80020f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d2:	f7ff fba9 	bl	8001828 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d907      	bls.n	80020f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e150      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
 80020e4:	40023800 	.word	0x40023800
 80020e8:	42470000 	.word	0x42470000
 80020ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b88      	ldr	r3, [pc, #544]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ea      	bne.n	80020d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8097 	beq.w	8002238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b81      	ldr	r3, [pc, #516]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b7d      	ldr	r3, [pc, #500]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a7c      	ldr	r2, [pc, #496]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b7a      	ldr	r3, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b77      	ldr	r3, [pc, #476]	; (8002318 <HAL_RCC_OscConfig+0x474>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b74      	ldr	r3, [pc, #464]	; (8002318 <HAL_RCC_OscConfig+0x474>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a73      	ldr	r2, [pc, #460]	; (8002318 <HAL_RCC_OscConfig+0x474>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff fb69 	bl	8001828 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7ff fb65 	bl	8001828 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e10c      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x474>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x2ea>
 8002180:	4b64      	ldr	r3, [pc, #400]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a63      	ldr	r2, [pc, #396]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	e01c      	b.n	80021c8 <HAL_RCC_OscConfig+0x324>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b05      	cmp	r3, #5
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x30c>
 8002196:	4b5f      	ldr	r3, [pc, #380]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a5e      	ldr	r2, [pc, #376]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a5b      	ldr	r2, [pc, #364]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0x324>
 80021b0:	4b58      	ldr	r3, [pc, #352]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a57      	ldr	r2, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	4b55      	ldr	r3, [pc, #340]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	4a54      	ldr	r2, [pc, #336]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80021c2:	f023 0304 	bic.w	r3, r3, #4
 80021c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7ff fb2a 	bl	8001828 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7ff fb26 	bl	8001828 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0cb      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ee:	4b49      	ldr	r3, [pc, #292]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ee      	beq.n	80021d8 <HAL_RCC_OscConfig+0x334>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7ff fb14 	bl	8001828 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7ff fb10 	bl	8001828 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0b5      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ee      	bne.n	8002204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a38      	ldr	r2, [pc, #224]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a1 	beq.w	8002384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b08      	cmp	r3, #8
 800224c:	d05c      	beq.n	8002308 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d141      	bne.n	80022da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_OscConfig+0x478>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fae4 	bl	8001828 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fae0 	bl	8001828 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e087      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	019b      	lsls	r3, r3, #6
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	3b01      	subs	r3, #1
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	491b      	ldr	r1, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x478>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff fab9 	bl	8001828 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff fab5 	bl	8001828 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e05c      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x416>
 80022d8:	e054      	b.n	8002384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_OscConfig+0x478>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff faa2 	bl	8001828 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff fa9e 	bl	8001828 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e045      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_OscConfig+0x470>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x444>
 8002306:	e03d      	b.n	8002384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e038      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000
 800231c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x4ec>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d028      	beq.n	8002380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d121      	bne.n	8002380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d11a      	bne.n	8002380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002358:	4293      	cmp	r3, r2
 800235a:	d111      	bne.n	8002380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	3b01      	subs	r3, #1
 800236a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0cc      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b68      	ldr	r3, [pc, #416]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d90c      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0b8      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a58      	ldr	r2, [pc, #352]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800240a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	494d      	ldr	r1, [pc, #308]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d044      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d119      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e07f      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d003      	beq.n	8002452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244e:	2b03      	cmp	r3, #3
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e06f      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e067      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4934      	ldr	r1, [pc, #208]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7ff f9d0 	bl	8001828 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7ff f9cc 	bl	8001828 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e04f      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 020c 	and.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1eb      	bne.n	800248c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d20c      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e032      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4916      	ldr	r1, [pc, #88]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800251a:	f000 f821 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800251e:	4602      	mov	r2, r0
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	490a      	ldr	r1, [pc, #40]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	5ccb      	ldrb	r3, [r1, r3]
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff f930 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00
 8002550:	40023800 	.word	0x40023800
 8002554:	08009764 	.word	0x08009764
 8002558:	20000010 	.word	0x20000010
 800255c:	20000014 	.word	0x20000014

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002564:	b094      	sub	sp, #80	; 0x50
 8002566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	647b      	str	r3, [r7, #68]	; 0x44
 800256c:	2300      	movs	r3, #0
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002570:	2300      	movs	r3, #0
 8002572:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002578:	4b79      	ldr	r3, [pc, #484]	; (8002760 <HAL_RCC_GetSysClockFreq+0x200>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d00d      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002584:	2b08      	cmp	r3, #8
 8002586:	f200 80e1 	bhi.w	800274c <HAL_RCC_GetSysClockFreq+0x1ec>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x34>
 800258e:	2b04      	cmp	r3, #4
 8002590:	d003      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x3a>
 8002592:	e0db      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_GetSysClockFreq+0x204>)
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002598:	e0db      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259a:	4b73      	ldr	r3, [pc, #460]	; (8002768 <HAL_RCC_GetSysClockFreq+0x208>)
 800259c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800259e:	e0d8      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a0:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025aa:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b6:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	099b      	lsrs	r3, r3, #6
 80025bc:	2200      	movs	r2, #0
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
 80025ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025d2:	4622      	mov	r2, r4
 80025d4:	462b      	mov	r3, r5
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e4:	0150      	lsls	r0, r2, #5
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4621      	mov	r1, r4
 80025ec:	1a51      	subs	r1, r2, r1
 80025ee:	6139      	str	r1, [r7, #16]
 80025f0:	4629      	mov	r1, r5
 80025f2:	eb63 0301 	sbc.w	r3, r3, r1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002604:	4659      	mov	r1, fp
 8002606:	018b      	lsls	r3, r1, #6
 8002608:	4651      	mov	r1, sl
 800260a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260e:	4651      	mov	r1, sl
 8002610:	018a      	lsls	r2, r1, #6
 8002612:	4651      	mov	r1, sl
 8002614:	ebb2 0801 	subs.w	r8, r2, r1
 8002618:	4659      	mov	r1, fp
 800261a:	eb63 0901 	sbc.w	r9, r3, r1
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002632:	4690      	mov	r8, r2
 8002634:	4699      	mov	r9, r3
 8002636:	4623      	mov	r3, r4
 8002638:	eb18 0303 	adds.w	r3, r8, r3
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	462b      	mov	r3, r5
 8002640:	eb49 0303 	adc.w	r3, r9, r3
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002652:	4629      	mov	r1, r5
 8002654:	024b      	lsls	r3, r1, #9
 8002656:	4621      	mov	r1, r4
 8002658:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800265c:	4621      	mov	r1, r4
 800265e:	024a      	lsls	r2, r1, #9
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002666:	2200      	movs	r2, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800266c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002670:	f7fd fe16 	bl	80002a0 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800267c:	e058      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_RCC_GetSysClockFreq+0x200>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	099b      	lsrs	r3, r3, #6
 8002684:	2200      	movs	r2, #0
 8002686:	4618      	mov	r0, r3
 8002688:	4611      	mov	r1, r2
 800268a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002698:	4642      	mov	r2, r8
 800269a:	464b      	mov	r3, r9
 800269c:	f04f 0000 	mov.w	r0, #0
 80026a0:	f04f 0100 	mov.w	r1, #0
 80026a4:	0159      	lsls	r1, r3, #5
 80026a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026aa:	0150      	lsls	r0, r2, #5
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4641      	mov	r1, r8
 80026b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b6:	4649      	mov	r1, r9
 80026b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026d0:	ebb2 040a 	subs.w	r4, r2, sl
 80026d4:	eb63 050b 	sbc.w	r5, r3, fp
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	00eb      	lsls	r3, r5, #3
 80026e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e6:	00e2      	lsls	r2, r4, #3
 80026e8:	4614      	mov	r4, r2
 80026ea:	461d      	mov	r5, r3
 80026ec:	4643      	mov	r3, r8
 80026ee:	18e3      	adds	r3, r4, r3
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	464b      	mov	r3, r9
 80026f4:	eb45 0303 	adc.w	r3, r5, r3
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002706:	4629      	mov	r1, r5
 8002708:	028b      	lsls	r3, r1, #10
 800270a:	4621      	mov	r1, r4
 800270c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002710:	4621      	mov	r1, r4
 8002712:	028a      	lsls	r2, r1, #10
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271a:	2200      	movs	r2, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	61fa      	str	r2, [r7, #28]
 8002720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002724:	f7fd fdbc 	bl	80002a0 <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4613      	mov	r3, r2
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_GetSysClockFreq+0x200>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	3301      	adds	r3, #1
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274a:	e002      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetSysClockFreq+0x204>)
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002754:	4618      	mov	r0, r3
 8002756:	3750      	adds	r7, #80	; 0x50
 8002758:	46bd      	mov	sp, r7
 800275a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	00f42400 	.word	0x00f42400
 8002768:	007a1200 	.word	0x007a1200

0800276c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e022      	b.n	80027c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fda9 	bl	80012e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f814 	bl	80027cc <HAL_SD_InitCard>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00a      	b.n	80027c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af04      	add	r7, sp, #16
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80027e8:	2376      	movs	r3, #118	; 0x76
 80027ea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681d      	ldr	r5, [r3, #0]
 80027f0:	466c      	mov	r4, sp
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002804:	4628      	mov	r0, r5
 8002806:	f001 fd7f 	bl	8004308 <SDIO_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e04f      	b.n	80028bc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_SD_InitCard+0xf8>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f001 fdb7 	bl	800439a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_SD_InitCard+0xf8>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002832:	2002      	movs	r0, #2
 8002834:	f7ff f804 	bl	8001840 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 f867 	bl	800390c <SD_PowerON>
 800283e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e02e      	b.n	80028bc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 ff86 	bl	8003770 <SD_InitCard>
 8002864:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e01b      	b.n	80028bc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800288c:	4618      	mov	r0, r3
 800288e:	f001 fe16 	bl	80044be <SDMMC_CmdBlockLength>
 8002892:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00f      	beq.n	80028ba <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <HAL_SD_InitCard+0xfc>)
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bdb0      	pop	{r4, r5, r7, pc}
 80028c4:	422580a0 	.word	0x422580a0
 80028c8:	004005ff 	.word	0x004005ff

080028cc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b092      	sub	sp, #72	; 0x48
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80028da:	f7fe ffa5 	bl	8001828 <HAL_GetTick>
 80028de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e1bd      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	f040 81b0 	bne.w	8002c6c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	441a      	add	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	429a      	cmp	r2, r3
 800291e:	d907      	bls.n	8002930 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e1a4      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2203      	movs	r2, #3
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2200      	movs	r2, #0
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	2b01      	cmp	r3, #1
 8002946:	d002      	beq.n	800294e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	025b      	lsls	r3, r3, #9
 8002958:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800295a:	2390      	movs	r3, #144	; 0x90
 800295c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002966:	2301      	movs	r3, #1
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f107 0214 	add.w	r2, r7, #20
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fd76 	bl	8004466 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d90a      	bls.n	8002996 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2202      	movs	r2, #2
 8002984:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800298c:	4618      	mov	r0, r3
 800298e:	f001 fdda 	bl	8004546 <SDMMC_CmdReadMultiBlock>
 8002992:	6478      	str	r0, [r7, #68]	; 0x44
 8002994:	e009      	b.n	80029aa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 fdad 	bl	8004502 <SDMMC_CmdReadSingleBlock>
 80029a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80029aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_SD_ReadBlocks+0x2d4>)
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029be:	431a      	orrs	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e151      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80029da:	e061      	b.n	8002aa0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03c      	beq.n	8002a64 <HAL_SD_ReadBlocks+0x198>
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d039      	beq.n	8002a64 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
 80029f4:	e033      	b.n	8002a5e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 fcaf 	bl	800435e <SDIO_ReadFIFO>
 8002a00:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a12:	3b01      	subs	r3, #1
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	3301      	adds	r3, #1
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	3301      	adds	r3, #1
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	0e1b      	lsrs	r3, r3, #24
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	3301      	adds	r3, #1
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a54:	3b01      	subs	r3, #1
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a60:	2b07      	cmp	r3, #7
 8002a62:	d9c8      	bls.n	80029f6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002a64:	f7fe fee0 	bl	8001828 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d902      	bls.n	8002a7a <HAL_SD_ReadBlocks+0x1ae>
 8002a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d112      	bne.n	8002aa0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_SD_ReadBlocks+0x2d4>)
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0ec      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa6:	f240 332a 	movw	r3, #810	; 0x32a
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d095      	beq.n	80029dc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d022      	beq.n	8002b04 <HAL_SD_ReadBlocks+0x238>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d91f      	bls.n	8002b04 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d01b      	beq.n	8002b04 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 fd9f 	bl	8004614 <SDMMC_CmdStopTransfer>
 8002ad6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <HAL_SD_ReadBlocks+0x2d4>)
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0ba      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_SD_ReadBlocks+0x2d4>)
 8002b18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	f043 0208 	orr.w	r2, r3, #8
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0a0      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <HAL_SD_ReadBlocks+0x2d4>)
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e086      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <HAL_SD_ReadBlocks+0x2d4>)
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e06c      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
 8002ba0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fbd8 	bl	800435e <SDIO_ReadFIFO>
 8002bae:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	3301      	adds	r3, #1
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	3301      	adds	r3, #1
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bec:	3b01      	subs	r3, #1
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	0e1b      	lsrs	r3, r3, #24
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c02:	3b01      	subs	r3, #1
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c06:	f7fe fe0f 	bl	8001828 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d902      	bls.n	8002c1c <HAL_SD_ReadBlocks+0x350>
 8002c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d112      	bne.n	8002c42 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <HAL_SD_ReadBlocks+0x3b8>)
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01b      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_SD_ReadBlocks+0x38a>
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1a6      	bne.n	8002ba4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e006      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3748      	adds	r7, #72	; 0x48
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	004005ff 	.word	0x004005ff

08002c88 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b092      	sub	sp, #72	; 0x48
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c96:	f7fe fdc7 	bl	8001828 <HAL_GetTick>
 8002c9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e166      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f040 8159 	bne.w	8002f7a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d907      	bls.n	8002cec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e14d      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d002      	beq.n	8002d0a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	025b      	lsls	r3, r3, #9
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	025b      	lsls	r3, r3, #9
 8002d14:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d16:	2390      	movs	r3, #144	; 0x90
 8002d18:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d22:	2301      	movs	r3, #1
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f107 0218 	add.w	r2, r7, #24
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fb98 	bl	8004466 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d90a      	bls.n	8002d52 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fc40 	bl	80045ce <SDMMC_CmdWriteMultiBlock>
 8002d4e:	6478      	str	r0, [r7, #68]	; 0x44
 8002d50:	e009      	b.n	8002d66 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2210      	movs	r2, #16
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fc13 	bl	800458a <SDMMC_CmdWriteSingleBlock>
 8002d64:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d012      	beq.n	8002d92 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a87      	ldr	r2, [pc, #540]	; (8002f90 <HAL_SD_WriteBlocks+0x308>)
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0fa      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002d96:	e065      	b.n	8002e64 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d040      	beq.n	8002e28 <HAL_SD_WriteBlocks+0x1a0>
 8002da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d03d      	beq.n	8002e28 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
 8002db0:	e037      	b.n	8002e22 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dba:	3301      	adds	r3, #1
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	021a      	lsls	r2, r3, #8
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	3301      	adds	r3, #1
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	3b01      	subs	r3, #1
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	061a      	lsls	r2, r3, #24
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	3301      	adds	r3, #1
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f107 0214 	add.w	r2, r7, #20
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 faae 	bl	8004378 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	3301      	adds	r3, #1
 8002e20:	643b      	str	r3, [r7, #64]	; 0x40
 8002e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	d9c4      	bls.n	8002db2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e28:	f7fe fcfe 	bl	8001828 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d902      	bls.n	8002e3e <HAL_SD_WriteBlocks+0x1b6>
 8002e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d112      	bne.n	8002e64 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a53      	ldr	r2, [pc, #332]	; (8002f90 <HAL_SD_WriteBlocks+0x308>)
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e091      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6a:	f240 331a 	movw	r3, #794	; 0x31a
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d091      	beq.n	8002d98 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d022      	beq.n	8002ec8 <HAL_SD_WriteBlocks+0x240>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d91f      	bls.n	8002ec8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fbbd 	bl	8004614 <SDMMC_CmdStopTransfer>
 8002e9a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	; (8002f90 <HAL_SD_WriteBlocks+0x308>)
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e05f      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_SD_WriteBlocks+0x308>)
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	f043 0208 	orr.w	r2, r3, #8
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e045      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d012      	beq.n	8002f30 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <HAL_SD_WriteBlocks+0x308>)
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e02b      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d012      	beq.n	8002f64 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_SD_WriteBlocks+0x308>)
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	f043 0210 	orr.w	r2, r3, #16
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e011      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e006      	b.n	8002f88 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3748      	adds	r7, #72	; 0x48
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	004005ff 	.word	0x004005ff

08002f94 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_SD_IRQHandler+0x2e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fd5c 	bl	8003a78 <SD_Read_IT>
 8002fc0:	e165      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 808f 	beq.w	80030f0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002fea:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002fee:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d039      	beq.n	800307e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d104      	bne.n	800301e <HAL_SD_IRQHandler+0x8a>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d011      	beq.n	8003042 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f001 faf6 	bl	8004614 <SDMMC_CmdStopTransfer>
 8003028:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f92f 	bl	80032a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f240 523a 	movw	r2, #1338	; 0x53a
 800304a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <HAL_SD_IRQHandler+0xda>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f001 ff1c 	bl	8004eac <HAL_SD_RxCpltCallback>
 8003074:	e10b      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f001 ff0e 	bl	8004e98 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800307c:	e107      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8102 	beq.w	800328e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d011      	beq.n	80030b8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f001 fabb 	bl	8004614 <SDMMC_CmdStopTransfer>
 800309e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8f4 	bl	80032a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 80e5 	bne.w	800328e <HAL_SD_IRQHandler+0x2fa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 80df 	bne.w	800328e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0208 	bic.w	r2, r2, #8
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f001 fed5 	bl	8004e98 <HAL_SD_TxCpltCallback>
}
 80030ee:	e0ce      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_SD_IRQHandler+0x17c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fd06 	bl	8003b1a <SD_Write_IT>
 800310e:	e0be      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003116:	f240 233a 	movw	r3, #570	; 0x23a
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80b6 	beq.w	800328e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	f043 0202 	orr.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	f043 0208 	orr.w	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	f043 0208 	orr.w	r2, r3, #8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f240 723a 	movw	r2, #1850	; 0x73a
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80031bc:	f023 0302 	bic.w	r3, r3, #2
 80031c0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fa24 	bl	8004614 <SDMMC_CmdStopTransfer>
 80031cc:	4602      	mov	r2, r0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f855 	bl	80032a0 <HAL_SD_ErrorCallback>
}
 80031f6:	e04a      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d045      	beq.n	800328e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_SD_IRQHandler+0x282>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_SD_IRQHandler+0x304>)
 800321c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fc41 	bl	8001aaa <HAL_DMA_Abort_IT>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d02f      	beq.n	800328e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fa2e 	bl	8003694 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003238:	e029      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <HAL_SD_IRQHandler+0x2ba>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d011      	beq.n	8003272 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_SD_IRQHandler+0x308>)
 8003254:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fc25 	bl	8001aaa <HAL_DMA_Abort_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d013      	beq.n	800328e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fa49 	bl	8003702 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003270:	e00d      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f001 fdfc 	bl	8004e84 <HAL_SD_AbortCallback>
}
 800328c:	e7ff      	b.n	800328e <HAL_SD_IRQHandler+0x2fa>
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	08003695 	.word	0x08003695
 800329c:	08003703 	.word	0x08003703

080032a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c2:	0f9b      	lsrs	r3, r3, #30
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ce:	0e9b      	lsrs	r3, r3, #26
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e0:	0e1b      	lsrs	r3, r3, #24
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	b2da      	uxtb	r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800330a:	b2da      	uxtb	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003314:	0d1b      	lsrs	r3, r3, #20
 8003316:	b29a      	uxth	r2, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003332:	0bdb      	lsrs	r3, r3, #15
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	b2da      	uxtb	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003344:	0b9b      	lsrs	r3, r3, #14
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003356:	0b5b      	lsrs	r3, r3, #13
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	b2da      	uxtb	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003368:	0b1b      	lsrs	r3, r3, #12
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	2b00      	cmp	r3, #0
 8003382:	d163      	bne.n	800344c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800338e:	4013      	ands	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003394:	0f92      	lsrs	r2, r2, #30
 8003396:	431a      	orrs	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a0:	0edb      	lsrs	r3, r3, #27
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b2:	0e1b      	lsrs	r3, r3, #24
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c4:	0d5b      	lsrs	r3, r3, #21
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d6:	0c9b      	lsrs	r3, r3, #18
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e8:	0bdb      	lsrs	r3, r3, #15
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	3302      	adds	r3, #2
 800340c:	2201      	movs	r2, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003416:	fb03 f202 	mul.w	r2, r3, r2
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	7a1b      	ldrb	r3, [r3, #8]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003438:	0a52      	lsrs	r2, r2, #9
 800343a:	fb03 f202 	mul.w	r2, r3, r2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
 800344a:	e031      	b.n	80034b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	2b01      	cmp	r3, #1
 8003452:	d11d      	bne.n	8003490 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	3301      	adds	r3, #1
 8003470:	029a      	lsls	r2, r3, #10
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003484:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	661a      	str	r2, [r3, #96]	; 0x60
 800348e:	e00f      	b.n	80034b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_SD_GetCardCSD+0x344>)
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e09d      	b.n	80035ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b4:	0b9b      	lsrs	r3, r3, #14
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	09db      	lsrs	r3, r3, #7
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	0fdb      	lsrs	r3, r3, #31
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	0f5b      	lsrs	r3, r3, #29
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	0e9b      	lsrs	r3, r3, #26
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	b2da      	uxtb	r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	0d9b      	lsrs	r3, r3, #22
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	b2da      	uxtb	r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	0d5b      	lsrs	r3, r3, #21
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	b2da      	uxtb	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	b2da      	uxtb	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	0bdb      	lsrs	r3, r3, #15
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	0b9b      	lsrs	r3, r3, #14
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	0b5b      	lsrs	r3, r3, #13
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	b2da      	uxtb	r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	0b1b      	lsrs	r3, r3, #12
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	0a9b      	lsrs	r3, r3, #10
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	004005ff 	.word	0x004005ff

080035fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9de 	bl	8003a28 <SD_SendStatus>
 800366c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	0a5b      	lsrs	r3, r3, #9
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800368a:	693b      	ldr	r3, [r7, #16]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff ffd1 	bl	8003654 <HAL_SD_GetCardState>
 80036b2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d002      	beq.n	80036ce <SD_DMATxAbort+0x3a>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d10a      	bne.n	80036e4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 ff9e 	bl	8004614 <SDMMC_CmdStopTransfer>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	431a      	orrs	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f001 fbc9 	bl	8004e84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80036f2:	e002      	b.n	80036fa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fdd3 	bl	80032a0 <HAL_SD_ErrorCallback>
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f240 523a 	movw	r2, #1338	; 0x53a
 8003718:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff ff9a 	bl	8003654 <HAL_SD_GetCardState>
 8003720:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d002      	beq.n	800373c <SD_DMARxAbort+0x3a>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d10a      	bne.n	8003752 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 ff67 	bl	8004614 <SDMMC_CmdStopTransfer>
 8003746:	4602      	mov	r2, r0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f001 fb92 	bl	8004e84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003760:	e002      	b.n	8003768 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fd9c 	bl	80032a0 <HAL_SD_ErrorCallback>
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b094      	sub	sp, #80	; 0x50
 8003774:	af04      	add	r7, sp, #16
 8003776:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003778:	2301      	movs	r3, #1
 800377a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fe18 	bl	80043b6 <SDIO_GetPowerState>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800378c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003790:	e0b8      	b.n	8003904 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	2b03      	cmp	r3, #3
 8003798:	d02f      	beq.n	80037fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 ffff 	bl	80047a2 <SDMMC_CmdSendCID>
 80037a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80037a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80037ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ae:	e0a9      	b.n	8003904 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fe42 	bl	8004440 <SDIO_GetResponse>
 80037bc:	4602      	mov	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2104      	movs	r1, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fe39 	bl	8004440 <SDIO_GetResponse>
 80037ce:	4602      	mov	r2, r0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2108      	movs	r1, #8
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fe30 	bl	8004440 <SDIO_GetResponse>
 80037e0:	4602      	mov	r2, r0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	210c      	movs	r1, #12
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fe27 	bl	8004440 <SDIO_GetResponse>
 80037f2:	4602      	mov	r2, r0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d00d      	beq.n	800381e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f107 020e 	add.w	r2, r7, #14
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f805 	bl	800481c <SDMMC_CmdSetRelAdd>
 8003812:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <SD_InitCard+0xae>
    {
      return errorstate;
 800381a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381c:	e072      	b.n	8003904 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	2b03      	cmp	r3, #3
 8003824:	d036      	beq.n	8003894 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003826:	89fb      	ldrh	r3, [r7, #14]
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	4619      	mov	r1, r3
 800383a:	4610      	mov	r0, r2
 800383c:	f000 ffcf 	bl	80047de <SDMMC_CmdSendCSD>
 8003840:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384a:	e05b      	b.n	8003904 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fdf4 	bl	8004440 <SDIO_GetResponse>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2104      	movs	r1, #4
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fdeb 	bl	8004440 <SDIO_GetResponse>
 800386a:	4602      	mov	r2, r0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2108      	movs	r1, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fde2 	bl	8004440 <SDIO_GetResponse>
 800387c:	4602      	mov	r2, r0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	210c      	movs	r1, #12
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fdd9 	bl	8004440 <SDIO_GetResponse>
 800388e:	4602      	mov	r2, r0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2104      	movs	r1, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fdd0 	bl	8004440 <SDIO_GetResponse>
 80038a0:	4603      	mov	r3, r0
 80038a2:	0d1a      	lsrs	r2, r3, #20
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80038a8:	f107 0310 	add.w	r3, r7, #16
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fd00 	bl	80032b4 <HAL_SD_GetCardCSD>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038be:	e021      	b.n	8003904 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	2200      	movs	r2, #0
 80038cc:	461c      	mov	r4, r3
 80038ce:	4615      	mov	r5, r2
 80038d0:	4622      	mov	r2, r4
 80038d2:	462b      	mov	r3, r5
 80038d4:	4608      	mov	r0, r1
 80038d6:	f000 febf 	bl	8004658 <SDMMC_CmdSelDesel>
 80038da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80038e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e4:	e00e      	b.n	8003904 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681d      	ldr	r5, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	466c      	mov	r4, sp
 80038ee:	f103 0210 	add.w	r2, r3, #16
 80038f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80038f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038f8:	3304      	adds	r3, #4
 80038fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038fc:	4628      	mov	r0, r5
 80038fe:	f000 fd03 	bl	8004308 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3740      	adds	r7, #64	; 0x40
 8003908:	46bd      	mov	sp, r7
 800390a:	bdb0      	pop	{r4, r5, r7, pc}

0800390c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 feba 	bl	800469e <SDMMC_CmdGoIdleState>
 800392a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	e072      	b.n	8003a1c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fecd 	bl	80046da <SDMMC_CmdOperCond>
 8003940:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fea3 	bl	800469e <SDMMC_CmdGoIdleState>
 8003958:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	e05b      	b.n	8003a1c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396e:	2b01      	cmp	r3, #1
 8003970:	d137      	bne.n	80039e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fecd 	bl	8004718 <SDMMC_CmdAppCommand>
 800397e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02d      	beq.n	80039e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003986:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800398a:	e047      	b.n	8003a1c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fec0 	bl	8004718 <SDMMC_CmdAppCommand>
 8003998:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	e03b      	b.n	8003a1c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	491e      	ldr	r1, [pc, #120]	; (8003a24 <SD_PowerON+0x118>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fed6 	bl	800475c <SDMMC_CmdAppOperCommand>
 80039b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039bc:	e02e      	b.n	8003a1c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fd3b 	bl	8004440 <SDIO_GetResponse>
 80039ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	0fdb      	lsrs	r3, r3, #31
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <SD_PowerON+0xcc>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <SD_PowerON+0xce>
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]

    count++;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3301      	adds	r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d802      	bhi.n	80039f2 <SD_PowerON+0xe6>
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0cc      	beq.n	800398c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d902      	bls.n	8003a02 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80039fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a00:	e00c      	b.n	8003a1c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
 8003a12:	e002      	b.n	8003a1a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	c1100000 	.word	0xc1100000

08003a28 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003a38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a3c:	e018      	b.n	8003a70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 ff07 	bl	800485e <SDMMC_CmdSendStatus>
 8003a50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	e009      	b.n	8003a70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fcec 	bl	8004440 <SDIO_GetResponse>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d03f      	beq.n	8003b12 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e033      	b.n	8003b00 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fc5e 	bl	800435e <SDIO_ReadFIFO>
 8003aa2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	0e1b      	lsrs	r3, r3, #24
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3301      	adds	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3301      	adds	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b07      	cmp	r3, #7
 8003b04:	d9c8      	bls.n	8003a98 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d043      	beq.n	8003bbc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e037      	b.n	8003baa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	021a      	lsls	r2, r3, #8
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	041a      	lsls	r2, r3, #16
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	061a      	lsls	r2, r3, #24
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f107 0208 	add.w	r2, r7, #8
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fbea 	bl	8004378 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b07      	cmp	r3, #7
 8003bae:	d9c4      	bls.n	8003b3a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07b      	b.n	8003cce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d108      	bne.n	8003bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be6:	d009      	beq.n	8003bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	61da      	str	r2, [r3, #28]
 8003bee:	e005      	b.n	8003bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fbd6 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	ea42 0103 	orr.w	r1, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	f003 0104 	and.w	r1, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0210 	and.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b088      	sub	sp, #32
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_SPI_Transmit+0x22>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e126      	b.n	8003f46 <HAL_SPI_Transmit+0x270>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d00:	f7fd fd92 	bl	8001828 <HAL_GetTick>
 8003d04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d1a:	e10b      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SPI_Transmit+0x52>
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2c:	e102      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2203      	movs	r2, #3
 8003d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	d10f      	bne.n	8003d96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d007      	beq.n	8003db4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbc:	d14b      	bne.n	8003e56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SPI_Transmit+0xf6>
 8003dc6:	8afb      	ldrh	r3, [r7, #22]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d13e      	bne.n	8003e4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	1c9a      	adds	r2, r3, #2
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003df0:	e02b      	b.n	8003e4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d112      	bne.n	8003e26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	881a      	ldrh	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e24:	e011      	b.n	8003e4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e26:	f7fd fcff 	bl	8001828 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d803      	bhi.n	8003e3e <HAL_SPI_Transmit+0x168>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d102      	bne.n	8003e44 <HAL_SPI_Transmit+0x16e>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e48:	e074      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ce      	bne.n	8003df2 <HAL_SPI_Transmit+0x11c>
 8003e54:	e04c      	b.n	8003ef0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Transmit+0x18e>
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d140      	bne.n	8003ee6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	7812      	ldrb	r2, [r2, #0]
 8003e70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e8a:	e02c      	b.n	8003ee6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d113      	bne.n	8003ec2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ec0:	e011      	b.n	8003ee6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec2:	f7fd fcb1 	bl	8001828 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_Transmit+0x204>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x20a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee4:	e026      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1cd      	bne.n	8003e8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f9c5 	bl	8004284 <SPI_EndRxTxTransaction>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e000      	b.n	8003f34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
    return;
 8003f8e:	e0ce      	b.n	800412e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_SPI_IRQHandler+0x5e>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
    return;
 8003fac:	e0bf      	b.n	800412e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_SPI_IRQHandler+0x7e>
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d105      	bne.n	8003fce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80b0 	beq.w	800412e <HAL_SPI_IRQHandler+0x1de>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80aa 	beq.w	800412e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d011      	beq.n	8004014 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	f043 0204 	orr.w	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	e00b      	b.n	800402c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]
        return;
 800402a:	e080      	b.n	800412e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d014      	beq.n	8004060 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f043 0208 	orr.w	r2, r3, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	2b00      	cmp	r3, #0
 800408a:	d04f      	beq.n	800412c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800409a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_SPI_IRQHandler+0x168>
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d034      	beq.n	8004122 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0203 	bic.w	r2, r2, #3
 80040c6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d011      	beq.n	80040f4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_SPI_IRQHandler+0x1e4>)
 80040d6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd fce4 	bl	8001aaa <HAL_DMA_Abort_IT>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d016      	beq.n	800412a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <HAL_SPI_IRQHandler+0x1e4>)
 8004102:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd fcce 	bl	8001aaa <HAL_DMA_Abort_IT>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004120:	e003      	b.n	800412a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f808 	bl	8004138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004128:	e000      	b.n	800412c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800412a:	bf00      	nop
    return;
 800412c:	bf00      	nop
  }
}
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	0800414d 	.word	0x0800414d

08004138 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff ffe6 	bl	8004138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004184:	f7fd fb50 	bl	8001828 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4413      	add	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004194:	f7fd fb48 	bl	8001828 <HAL_GetTick>
 8004198:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800419a:	4b39      	ldr	r3, [pc, #228]	; (8004280 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	015b      	lsls	r3, r3, #5
 80041a0:	0d1b      	lsrs	r3, r3, #20
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041aa:	e054      	b.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d050      	beq.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041b4:	f7fd fb38 	bl	8001828 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d902      	bls.n	80041ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d13d      	bne.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e2:	d111      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	d004      	beq.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f6:	d107      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004206:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004210:	d10f      	bne.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e017      	b.n	8004276 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3b01      	subs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4013      	ands	r3, r2
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	429a      	cmp	r2, r3
 8004272:	d19b      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000010 	.word	0x20000010

08004284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <SPI_EndRxTxTransaction+0x7c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <SPI_EndRxTxTransaction+0x80>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0d5b      	lsrs	r3, r3, #21
 800429c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ae:	d112      	bne.n	80042d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ff5a 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3b01      	subs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	d0f2      	beq.n	80042d6 <SPI_EndRxTxTransaction+0x52>
 80042f0:	e000      	b.n	80042f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80042f2:	bf00      	nop
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000010 	.word	0x20000010
 8004304:	165e9f81 	.word	0x165e9f81

08004308 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004308:	b084      	sub	sp, #16
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	f107 001c 	add.w	r0, r7, #28
 8004316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800431e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004320:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004322:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004326:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800432a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800432e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004332:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004342:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	b004      	add	sp, #16
 800435c:	4770      	bx	lr

0800435e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2203      	movs	r2, #3
 80043a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0303 	and.w	r3, r3, #3
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80043f0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80043f6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80043fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800440c:	f023 030f 	bic.w	r3, r3, #15
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	b2db      	uxtb	r3, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3314      	adds	r3, #20
 800444e:	461a      	mov	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4413      	add	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
}  
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800448c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004492:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004498:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0

}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b088      	sub	sp, #32
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80044cc:	2310      	movs	r3, #16
 80044ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044d0:	2340      	movs	r3, #64	; 0x40
 80044d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff74 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	2110      	movs	r1, #16
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9d7 	bl	80048a4 <SDMMC_GetCmdResp1>
 80044f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044f8:	69fb      	ldr	r3, [r7, #28]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b088      	sub	sp, #32
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004510:	2311      	movs	r3, #17
 8004512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004514:	2340      	movs	r3, #64	; 0x40
 8004516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800451c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004522:	f107 0308 	add.w	r3, r7, #8
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ff52 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	2111      	movs	r1, #17
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f9b5 	bl	80048a4 <SDMMC_GetCmdResp1>
 800453a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800453c:	69fb      	ldr	r3, [r7, #28]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b088      	sub	sp, #32
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004554:	2312      	movs	r3, #18
 8004556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004564:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff30 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	2112      	movs	r1, #18
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f993 	bl	80048a4 <SDMMC_GetCmdResp1>
 800457e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004580:	69fb      	ldr	r3, [r7, #28]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b088      	sub	sp, #32
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004598:	2318      	movs	r3, #24
 800459a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800459c:	2340      	movs	r3, #64	; 0x40
 800459e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045aa:	f107 0308 	add.w	r3, r7, #8
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ff0e 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	2118      	movs	r1, #24
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f971 	bl	80048a4 <SDMMC_GetCmdResp1>
 80045c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045c4:	69fb      	ldr	r3, [r7, #28]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80045dc:	2319      	movs	r3, #25
 80045de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045e0:	2340      	movs	r3, #64	; 0x40
 80045e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff feec 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	2119      	movs	r1, #25
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f94f 	bl	80048a4 <SDMMC_GetCmdResp1>
 8004606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004608:	69fb      	ldr	r3, [r7, #28]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004620:	230c      	movs	r3, #12
 8004622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004624:	2340      	movs	r3, #64	; 0x40
 8004626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800462c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff feca 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800463e:	4a05      	ldr	r2, [pc, #20]	; (8004654 <SDMMC_CmdStopTransfer+0x40>)
 8004640:	210c      	movs	r1, #12
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f92e 	bl	80048a4 <SDMMC_GetCmdResp1>
 8004648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800464a:	69fb      	ldr	r3, [r7, #28]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	05f5e100 	.word	0x05f5e100

08004658 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004668:	2307      	movs	r3, #7
 800466a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004670:	2300      	movs	r3, #0
 8004672:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004678:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800467a:	f107 0310 	add.w	r3, r7, #16
 800467e:	4619      	mov	r1, r3
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff fea6 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	2107      	movs	r1, #7
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f909 	bl	80048a4 <SDMMC_GetCmdResp1>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004696:	4618      	mov	r0, r3
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b088      	sub	sp, #32
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fe85 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fb23 	bl	8004d14 <SDMMC_GetCmdError>
 80046ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046d0:	69fb      	ldr	r3, [r7, #28]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b088      	sub	sp, #32
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80046e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80046e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80046e8:	2308      	movs	r3, #8
 80046ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046ec:	2340      	movs	r3, #64	; 0x40
 80046ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff fe66 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fab6 	bl	8004c78 <SDMMC_GetCmdResp7>
 800470c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800470e:	69fb      	ldr	r3, [r7, #28]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004726:	2337      	movs	r3, #55	; 0x37
 8004728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800472a:	2340      	movs	r3, #64	; 0x40
 800472c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004736:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fe47 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	2137      	movs	r1, #55	; 0x37
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8aa 	bl	80048a4 <SDMMC_GetCmdResp1>
 8004750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004752:	69fb      	ldr	r3, [r7, #28]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004772:	2329      	movs	r3, #41	; 0x29
 8004774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004776:	2340      	movs	r3, #64	; 0x40
 8004778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800477e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe21 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f9bd 	bl	8004b10 <SDMMC_GetCmdResp3>
 8004796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004798:	69fb      	ldr	r3, [r7, #28]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b088      	sub	sp, #32
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80047ae:	2302      	movs	r3, #2
 80047b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80047b2:	23c0      	movs	r3, #192	; 0xc0
 80047b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fe03 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f957 	bl	8004a80 <SDMMC_GetCmdResp2>
 80047d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047d4:	69fb      	ldr	r3, [r7, #28]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b088      	sub	sp, #32
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80047ec:	2309      	movs	r3, #9
 80047ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80047f0:	23c0      	movs	r3, #192	; 0xc0
 80047f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fde4 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f938 	bl	8004a80 <SDMMC_GetCmdResp2>
 8004810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004812:	69fb      	ldr	r3, [r7, #28]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3720      	adds	r7, #32
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800482a:	2303      	movs	r3, #3
 800482c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800483a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800483c:	f107 0308 	add.w	r3, r7, #8
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fdc5 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	2103      	movs	r1, #3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f99d 	bl	8004b8c <SDMMC_GetCmdResp6>
 8004852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004854:	69fb      	ldr	r3, [r7, #28]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b088      	sub	sp, #32
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800486c:	230d      	movs	r3, #13
 800486e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004870:	2340      	movs	r3, #64	; 0x40
 8004872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fda4 	bl	80043d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	210d      	movs	r1, #13
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f807 	bl	80048a4 <SDMMC_GetCmdResp1>
 8004896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004898:	69fb      	ldr	r3, [r7, #28]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	460b      	mov	r3, r1
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80048b2:	4b70      	ldr	r3, [pc, #448]	; (8004a74 <SDMMC_GetCmdResp1+0x1d0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a70      	ldr	r2, [pc, #448]	; (8004a78 <SDMMC_GetCmdResp1+0x1d4>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	0a5a      	lsrs	r2, r3, #9
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	1e5a      	subs	r2, r3, #1
 80048ca:	61fa      	str	r2, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048d4:	e0c9      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ef      	beq.n	80048c6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1ea      	bne.n	80048c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2204      	movs	r2, #4
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004902:	2304      	movs	r3, #4
 8004904:	e0b1      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004918:	2301      	movs	r3, #1
 800491a:	e0a6      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	22c5      	movs	r2, #197	; 0xc5
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fd7f 	bl	8004426 <SDIO_GetCommandResponse>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	4293      	cmp	r3, r2
 8004930:	d001      	beq.n	8004936 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004932:	2301      	movs	r3, #1
 8004934:	e099      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004936:	2100      	movs	r1, #0
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff fd81 	bl	8004440 <SDIO_GetResponse>
 800493e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4b4e      	ldr	r3, [pc, #312]	; (8004a7c <SDMMC_GetCmdResp1+0x1d8>)
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800494a:	2300      	movs	r3, #0
 800494c:	e08d      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	da02      	bge.n	800495a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004958:	e087      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	e080      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	e079      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004984:	e071      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004994:	e069      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80049a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a4:	e061      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80049b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049b4:	e059      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80049c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049c4:	e051      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80049d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049d4:	e049      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80049e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049e4:	e041      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80049f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f4:	e039      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a04:	e031      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a14:	e029      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004a20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a24:	e021      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004a30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a34:	e019      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a44:	e011      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004a50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a54:	e009      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004a60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004a64:	e001      	b.n	8004a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000010 	.word	0x20000010
 8004a78:	10624dd3 	.word	0x10624dd3
 8004a7c:	fdffe008 	.word	0xfdffe008

08004a80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a88:	4b1f      	ldr	r3, [pc, #124]	; (8004b08 <SDMMC_GetCmdResp2+0x88>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <SDMMC_GetCmdResp2+0x8c>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a5b      	lsrs	r3, r3, #9
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004aac:	e026      	b.n	8004afc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1ea      	bne.n	8004a9e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ada:	2304      	movs	r3, #4
 8004adc:	e00e      	b.n	8004afc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e003      	b.n	8004afc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	22c5      	movs	r2, #197	; 0xc5
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000010 	.word	0x20000010
 8004b0c:	10624dd3 	.word	0x10624dd3

08004b10 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b18:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <SDMMC_GetCmdResp3+0x74>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <SDMMC_GetCmdResp3+0x78>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	0a5b      	lsrs	r3, r3, #9
 8004b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1e5a      	subs	r2, r3, #1
 8004b32:	60fa      	str	r2, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b3c:	e01b      	b.n	8004b76 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ef      	beq.n	8004b2e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ea      	bne.n	8004b2e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2204      	movs	r2, #4
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	e003      	b.n	8004b76 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	22c5      	movs	r2, #197	; 0xc5
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000010 	.word	0x20000010
 8004b88:	10624dd3 	.word	0x10624dd3

08004b8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	460b      	mov	r3, r1
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b9a:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <SDMMC_GetCmdResp6+0xe4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a35      	ldr	r2, [pc, #212]	; (8004c74 <SDMMC_GetCmdResp6+0xe8>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	0a5b      	lsrs	r3, r3, #9
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	1e5a      	subs	r2, r3, #1
 8004bb4:	61fa      	str	r2, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bbe:	e052      	b.n	8004c66 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0ef      	beq.n	8004bb0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ea      	bne.n	8004bb0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2204      	movs	r2, #4
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bec:	2304      	movs	r3, #4
 8004bee:	e03a      	b.n	8004c66 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e02f      	b.n	8004c66 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7ff fc0d 	bl	8004426 <SDIO_GetCommandResponse>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	7afb      	ldrb	r3, [r7, #11]
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d001      	beq.n	8004c1a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e025      	b.n	8004c66 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	22c5      	movs	r2, #197	; 0xc5
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004c20:	2100      	movs	r1, #0
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff fc0c 	bl	8004440 <SDIO_GetResponse>
 8004c28:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e011      	b.n	8004c66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c50:	e009      	b.n	8004c66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c60:	e001      	b.n	8004c66 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000010 	.word	0x20000010
 8004c74:	10624dd3 	.word	0x10624dd3

08004c78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c80:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <SDMMC_GetCmdResp7+0x94>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <SDMMC_GetCmdResp7+0x98>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	0a5b      	lsrs	r3, r3, #9
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1e5a      	subs	r2, r3, #1
 8004c9a:	60fa      	str	r2, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ca4:	e02c      	b.n	8004d00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0ef      	beq.n	8004c96 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ea      	bne.n	8004c96 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cd2:	2304      	movs	r3, #4
 8004cd4:	e014      	b.n	8004d00 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e009      	b.n	8004d00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2240      	movs	r2, #64	; 0x40
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004cfe:	2300      	movs	r3, #0
  
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000010 	.word	0x20000010
 8004d10:	10624dd3 	.word	0x10624dd3

08004d14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <SDMMC_GetCmdError+0x50>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a11      	ldr	r2, [pc, #68]	; (8004d68 <SDMMC_GetCmdError+0x54>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0a5b      	lsrs	r3, r3, #9
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
 8004d30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1e5a      	subs	r2, r3, #1
 8004d36:	60fa      	str	r2, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d40:	e009      	b.n	8004d56 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f1      	beq.n	8004d32 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	22c5      	movs	r2, #197	; 0xc5
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000010 	.word	0x20000010
 8004d68:	10624dd3 	.word	0x10624dd3

08004d6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004d70:	4904      	ldr	r1, [pc, #16]	; (8004d84 <MX_FATFS_Init+0x18>)
 8004d72:	4805      	ldr	r0, [pc, #20]	; (8004d88 <MX_FATFS_Init+0x1c>)
 8004d74:	f002 fce8 	bl	8007748 <FATFS_LinkDriver>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <MX_FATFS_Init+0x20>)
 8004d7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d80:	bf00      	nop
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200009e8 	.word	0x200009e8
 8004d88:	08009774 	.word	0x08009774
 8004d8c:	200009e4 	.word	0x200009e4

08004d90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004daa:	f000 f89e 	bl	8004eea <BSP_SD_IsDetected>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d001      	beq.n	8004db8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e005      	b.n	8004dc4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004db8:	4804      	ldr	r0, [pc, #16]	; (8004dcc <BSP_SD_Init+0x2c>)
 8004dba:	f7fd fcd7 	bl	800276c <HAL_SD_Init>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	200008fc 	.word	0x200008fc

08004dd0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	4806      	ldr	r0, [pc, #24]	; (8004e08 <BSP_SD_ReadBlocks+0x38>)
 8004dee:	f7fd fd6d 	bl	80028cc <HAL_SD_ReadBlocks>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200008fc 	.word	0x200008fc

08004e0c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	4806      	ldr	r0, [pc, #24]	; (8004e44 <BSP_SD_WriteBlocks+0x38>)
 8004e2a:	f7fd ff2d 	bl	8002c88 <HAL_SD_WriteBlocks>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200008fc 	.word	0x200008fc

08004e48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004e4c:	4805      	ldr	r0, [pc, #20]	; (8004e64 <BSP_SD_GetCardState+0x1c>)
 8004e4e:	f7fe fc01 	bl	8003654 <HAL_SD_GetCardState>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200008fc 	.word	0x200008fc

08004e68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4803      	ldr	r0, [pc, #12]	; (8004e80 <BSP_SD_GetCardInfo+0x18>)
 8004e74:	f7fe fbc2 	bl	80035fc <HAL_SD_GetCardInfo>
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200008fc 	.word	0x200008fc

08004e84 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004e8c:	f000 f818 	bl	8004ec0 <BSP_SD_AbortCallback>
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004ea0:	f000 f815 	bl	8004ece <BSP_SD_WriteCpltCallback>
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004eb4:	f000 f812 	bl	8004edc <BSP_SD_ReadCpltCallback>
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0

}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0

}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0

}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	b2db      	uxtb	r3, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <SD_CheckStatus+0x38>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004f14:	f7ff ff98 	bl	8004e48 <BSP_SD_GetCardState>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d107      	bne.n	8004f2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <SD_CheckStatus+0x38>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <SD_CheckStatus+0x38>)
 8004f2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004f2e:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <SD_CheckStatus+0x38>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b2db      	uxtb	r3, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000019 	.word	0x20000019

08004f40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <SD_initialize+0x38>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004f50:	f7ff ff26 	bl	8004da0 <BSP_SD_Init>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff ffd1 	bl	8004f04 <SD_CheckStatus>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <SD_initialize+0x38>)
 8004f68:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004f6a:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <SD_initialize+0x38>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000019 	.word	0x20000019

08004f7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ffbb 	bl	8004f04 <SD_CheckStatus>
 8004f8e:	4603      	mov	r3, r0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004fac:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	68b8      	ldr	r0, [r7, #8]
 8004fb6:	f7ff ff0b 	bl	8004dd0 <BSP_SD_ReadBlocks>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d107      	bne.n	8004fd0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004fc0:	bf00      	nop
 8004fc2:	f7ff ff41 	bl	8004e48 <BSP_SD_GetCardState>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1fa      	bne.n	8004fc2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f7ff ff08 	bl	8004e0c <BSP_SD_WriteBlocks>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d107      	bne.n	8005012 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005002:	bf00      	nop
 8005004:	f7ff ff20 	bl	8004e48 <BSP_SD_GetCardState>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1fa      	bne.n	8005004 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005012:	7dfb      	ldrb	r3, [r7, #23]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08c      	sub	sp, #48	; 0x30
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	603a      	str	r2, [r7, #0]
 8005026:	71fb      	strb	r3, [r7, #7]
 8005028:	460b      	mov	r3, r1
 800502a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005032:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <SD_ioctl+0xac>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <SD_ioctl+0x28>
 8005040:	2303      	movs	r3, #3
 8005042:	e03c      	b.n	80050be <SD_ioctl+0xa2>

  switch (cmd)
 8005044:	79bb      	ldrb	r3, [r7, #6]
 8005046:	2b03      	cmp	r3, #3
 8005048:	d834      	bhi.n	80050b4 <SD_ioctl+0x98>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <SD_ioctl+0x34>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005061 	.word	0x08005061
 8005054:	08005069 	.word	0x08005069
 8005058:	08005081 	.word	0x08005081
 800505c:	0800509b 	.word	0x0800509b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005066:	e028      	b.n	80050ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005068:	f107 030c 	add.w	r3, r7, #12
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fefb 	bl	8004e68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800507e:	e01c      	b.n	80050ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005080:	f107 030c 	add.w	r3, r7, #12
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff feef 	bl	8004e68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	b29a      	uxth	r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005098:	e00f      	b.n	80050ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800509a:	f107 030c 	add.w	r3, r7, #12
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fee2 	bl	8004e68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	0a5a      	lsrs	r2, r3, #9
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050b2:	e002      	b.n	80050ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80050ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3730      	adds	r7, #48	; 0x30
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000019 	.word	0x20000019

080050cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <disk_status+0x30>)
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	79fa      	ldrb	r2, [r7, #7]
 80050e4:	4905      	ldr	r1, [pc, #20]	; (80050fc <disk_status+0x30>)
 80050e6:	440a      	add	r2, r1
 80050e8:	7a12      	ldrb	r2, [r2, #8]
 80050ea:	4610      	mov	r0, r2
 80050ec:	4798      	blx	r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000a14 	.word	0x20000a14

08005100 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	4a0d      	ldr	r2, [pc, #52]	; (8005148 <disk_initialize+0x48>)
 8005112:	5cd3      	ldrb	r3, [r2, r3]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d111      	bne.n	800513c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <disk_initialize+0x48>)
 800511c:	2101      	movs	r1, #1
 800511e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <disk_initialize+0x48>)
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	79fa      	ldrb	r2, [r7, #7]
 800512e:	4906      	ldr	r1, [pc, #24]	; (8005148 <disk_initialize+0x48>)
 8005130:	440a      	add	r2, r1
 8005132:	7a12      	ldrb	r2, [r2, #8]
 8005134:	4610      	mov	r0, r2
 8005136:	4798      	blx	r3
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000a14 	.word	0x20000a14

0800514c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <disk_read+0x3c>)
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	689c      	ldr	r4, [r3, #8]
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	4a07      	ldr	r2, [pc, #28]	; (8005188 <disk_read+0x3c>)
 800516c:	4413      	add	r3, r2
 800516e:	7a18      	ldrb	r0, [r3, #8]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	47a0      	blx	r4
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]
  return res;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd90      	pop	{r4, r7, pc}
 8005186:	bf00      	nop
 8005188:	20000a14 	.word	0x20000a14

0800518c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <disk_write+0x3c>)
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	68dc      	ldr	r4, [r3, #12]
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <disk_write+0x3c>)
 80051ac:	4413      	add	r3, r2
 80051ae:	7a18      	ldrb	r0, [r3, #8]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	47a0      	blx	r4
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000a14 	.word	0x20000a14

080051cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	603a      	str	r2, [r7, #0]
 80051d6:	71fb      	strb	r3, [r7, #7]
 80051d8:	460b      	mov	r3, r1
 80051da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <disk_ioctl+0x38>)
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	79fa      	ldrb	r2, [r7, #7]
 80051ea:	4906      	ldr	r1, [pc, #24]	; (8005204 <disk_ioctl+0x38>)
 80051ec:	440a      	add	r2, r1
 80051ee:	7a10      	ldrb	r0, [r2, #8]
 80051f0:	79b9      	ldrb	r1, [r7, #6]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	4798      	blx	r3
 80051f6:	4603      	mov	r3, r0
 80051f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000a14 	.word	0x20000a14

08005208 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3301      	adds	r3, #1
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005218:	89fb      	ldrh	r3, [r7, #14]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	b21a      	sxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b21b      	sxth	r3, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	b21b      	sxth	r3, r3
 8005228:	81fb      	strh	r3, [r7, #14]
	return rv;
 800522a:	89fb      	ldrh	r3, [r7, #14]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3303      	adds	r3, #3
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	3202      	adds	r2, #2
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	3201      	adds	r2, #1
 800525e:	7812      	ldrb	r2, [r2, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	887a      	ldrh	r2, [r7, #2]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	701a      	strb	r2, [r3, #0]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	1c53      	adds	r3, r2, #1
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1c59      	adds	r1, r3, #1
 8005330:	6179      	str	r1, [r7, #20]
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3b01      	subs	r3, #1
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f1      	bne.n	8005326 <mem_cpy+0x1a>
	}
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	617a      	str	r2, [r7, #20]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3b01      	subs	r3, #1
 800536e:	607b      	str	r3, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f3      	bne.n	800535e <mem_set+0x10>
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	; 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	61fa      	str	r2, [r7, #28]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	61ba      	str	r2, [r7, #24]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	1acb      	subs	r3, r1, r3
 80053b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <mem_cmp+0x40>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0eb      	beq.n	800539c <mem_cmp+0x18>

	return r;
 80053c4:	697b      	ldr	r3, [r7, #20]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80053dc:	e002      	b.n	80053e4 <chk_chr+0x12>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3301      	adds	r3, #1
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <chk_chr+0x26>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d1f2      	bne.n	80053de <chk_chr+0xc>
	return *str;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	781b      	ldrb	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e029      	b.n	8005470 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800541c:	4a27      	ldr	r2, [pc, #156]	; (80054bc <chk_lock+0xb4>)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	4413      	add	r3, r2
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01d      	beq.n	8005466 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800542a:	4a24      	ldr	r2, [pc, #144]	; (80054bc <chk_lock+0xb4>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	4413      	add	r3, r2
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d116      	bne.n	800546a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800543c:	4a1f      	ldr	r2, [pc, #124]	; (80054bc <chk_lock+0xb4>)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4413      	add	r3, r2
 8005444:	3304      	adds	r3, #4
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800544c:	429a      	cmp	r2, r3
 800544e:	d10c      	bne.n	800546a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005450:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <chk_lock+0xb4>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	4413      	add	r3, r2
 8005458:	3308      	adds	r3, #8
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005460:	429a      	cmp	r2, r3
 8005462:	d102      	bne.n	800546a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005464:	e007      	b.n	8005476 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d9d2      	bls.n	800541c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d109      	bne.n	8005490 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <chk_lock+0x80>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d101      	bne.n	800548c <chk_lock+0x84>
 8005488:	2300      	movs	r3, #0
 800548a:	e010      	b.n	80054ae <chk_lock+0xa6>
 800548c:	2312      	movs	r3, #18
 800548e:	e00e      	b.n	80054ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d108      	bne.n	80054a8 <chk_lock+0xa0>
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <chk_lock+0xb4>)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	4413      	add	r3, r2
 800549e:	330c      	adds	r3, #12
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d101      	bne.n	80054ac <chk_lock+0xa4>
 80054a8:	2310      	movs	r3, #16
 80054aa:	e000      	b.n	80054ae <chk_lock+0xa6>
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	200009f4 	.word	0x200009f4

080054c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80054c6:	2300      	movs	r3, #0
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	e002      	b.n	80054d2 <enq_lock+0x12>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3301      	adds	r3, #1
 80054d0:	607b      	str	r3, [r7, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d806      	bhi.n	80054e6 <enq_lock+0x26>
 80054d8:	4a09      	ldr	r2, [pc, #36]	; (8005500 <enq_lock+0x40>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	4413      	add	r3, r2
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f2      	bne.n	80054cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	200009f4 	.word	0x200009f4

08005504 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e01f      	b.n	8005554 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005514:	4a41      	ldr	r2, [pc, #260]	; (800561c <inc_lock+0x118>)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	4413      	add	r3, r2
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d113      	bne.n	800554e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005526:	4a3d      	ldr	r2, [pc, #244]	; (800561c <inc_lock+0x118>)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	4413      	add	r3, r2
 800552e:	3304      	adds	r3, #4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005536:	429a      	cmp	r2, r3
 8005538:	d109      	bne.n	800554e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800553a:	4a38      	ldr	r2, [pc, #224]	; (800561c <inc_lock+0x118>)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	4413      	add	r3, r2
 8005542:	3308      	adds	r3, #8
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800554a:	429a      	cmp	r2, r3
 800554c:	d006      	beq.n	800555c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d9dc      	bls.n	8005514 <inc_lock+0x10>
 800555a:	e000      	b.n	800555e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800555c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d132      	bne.n	80055ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e002      	b.n	8005570 <inc_lock+0x6c>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d806      	bhi.n	8005584 <inc_lock+0x80>
 8005576:	4a29      	ldr	r2, [pc, #164]	; (800561c <inc_lock+0x118>)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	4413      	add	r3, r2
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f2      	bne.n	800556a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d101      	bne.n	800558e <inc_lock+0x8a>
 800558a:	2300      	movs	r3, #0
 800558c:	e040      	b.n	8005610 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4922      	ldr	r1, [pc, #136]	; (800561c <inc_lock+0x118>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	440b      	add	r3, r1
 800559a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	491e      	ldr	r1, [pc, #120]	; (800561c <inc_lock+0x118>)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	440b      	add	r3, r1
 80055a8:	3304      	adds	r3, #4
 80055aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	491a      	ldr	r1, [pc, #104]	; (800561c <inc_lock+0x118>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	440b      	add	r3, r1
 80055b8:	3308      	adds	r3, #8
 80055ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80055bc:	4a17      	ldr	r2, [pc, #92]	; (800561c <inc_lock+0x118>)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	4413      	add	r3, r2
 80055c4:	330c      	adds	r3, #12
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <inc_lock+0xe0>
 80055d0:	4a12      	ldr	r2, [pc, #72]	; (800561c <inc_lock+0x118>)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	4413      	add	r3, r2
 80055d8:	330c      	adds	r3, #12
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <inc_lock+0xe0>
 80055e0:	2300      	movs	r3, #0
 80055e2:	e015      	b.n	8005610 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d108      	bne.n	80055fc <inc_lock+0xf8>
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <inc_lock+0x118>)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	4413      	add	r3, r2
 80055f2:	330c      	adds	r3, #12
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	3301      	adds	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	e001      	b.n	8005600 <inc_lock+0xfc>
 80055fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005600:	4906      	ldr	r1, [pc, #24]	; (800561c <inc_lock+0x118>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	440b      	add	r3, r1
 8005608:	330c      	adds	r3, #12
 800560a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3301      	adds	r3, #1
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	200009f4 	.word	0x200009f4

08005620 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	607b      	str	r3, [r7, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d825      	bhi.n	8005680 <dec_lock+0x60>
		n = Files[i].ctr;
 8005634:	4a17      	ldr	r2, [pc, #92]	; (8005694 <dec_lock+0x74>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	4413      	add	r3, r2
 800563c:	330c      	adds	r3, #12
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005648:	d101      	bne.n	800564e <dec_lock+0x2e>
 800564a:	2300      	movs	r3, #0
 800564c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <dec_lock+0x3a>
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	3b01      	subs	r3, #1
 8005658:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800565a:	4a0e      	ldr	r2, [pc, #56]	; (8005694 <dec_lock+0x74>)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	330c      	adds	r3, #12
 8005664:	89fa      	ldrh	r2, [r7, #14]
 8005666:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005668:	89fb      	ldrh	r3, [r7, #14]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d105      	bne.n	800567a <dec_lock+0x5a>
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <dec_lock+0x74>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4413      	add	r3, r2
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	737b      	strb	r3, [r7, #13]
 800567e:	e001      	b.n	8005684 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005680:	2302      	movs	r3, #2
 8005682:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005684:	7b7b      	ldrb	r3, [r7, #13]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	200009f4 	.word	0x200009f4

08005698 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e010      	b.n	80056c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80056a6:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <clear_lock+0x44>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	4413      	add	r3, r2
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d105      	bne.n	80056c2 <clear_lock+0x2a>
 80056b6:	4a09      	ldr	r2, [pc, #36]	; (80056dc <clear_lock+0x44>)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	4413      	add	r3, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d9eb      	bls.n	80056a6 <clear_lock+0xe>
	}
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	200009f4 	.word	0x200009f4

080056e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	78db      	ldrb	r3, [r3, #3]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d034      	beq.n	800575e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7858      	ldrb	r0, [r3, #1]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005704:	2301      	movs	r3, #1
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	f7ff fd40 	bl	800518c <disk_write>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e022      	b.n	800575e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	429a      	cmp	r2, r3
 800572c:	d217      	bcs.n	800575e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	789b      	ldrb	r3, [r3, #2]
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e010      	b.n	8005758 <sync_window+0x78>
					wsect += fs->fsize;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	7858      	ldrb	r0, [r3, #1]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800574a:	2301      	movs	r3, #1
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	f7ff fd1d 	bl	800518c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	3b01      	subs	r3, #1
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d8eb      	bhi.n	8005736 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800575e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d01b      	beq.n	80057b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ffad 	bl	80056e0 <sync_window>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d113      	bne.n	80057b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	7858      	ldrb	r0, [r3, #1]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800579a:	2301      	movs	r3, #1
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	f7ff fcd5 	bl	800514c <disk_read>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff87 	bl	80056e0 <sync_window>
 80057d2:	4603      	mov	r3, r0
 80057d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d158      	bne.n	800588e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d148      	bne.n	8005876 <sync_fs+0xb2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	791b      	ldrb	r3, [r3, #4]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d144      	bne.n	8005876 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3330      	adds	r3, #48	; 0x30
 80057f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fda9 	bl	800534e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3330      	adds	r3, #48	; 0x30
 8005800:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005804:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fd38 	bl	800527e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3330      	adds	r3, #48	; 0x30
 8005812:	4921      	ldr	r1, [pc, #132]	; (8005898 <sync_fs+0xd4>)
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fd4d 	bl	80052b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3330      	adds	r3, #48	; 0x30
 800581e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005822:	491e      	ldr	r1, [pc, #120]	; (800589c <sync_fs+0xd8>)
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fd45 	bl	80052b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3330      	adds	r3, #48	; 0x30
 800582e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f7ff fd3b 	bl	80052b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3330      	adds	r3, #48	; 0x30
 8005842:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f7ff fd31 	bl	80052b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7858      	ldrb	r0, [r3, #1]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	2301      	movs	r3, #1
 800586c:	f7ff fc8e 	bl	800518c <disk_write>
			fs->fsi_flag = 0;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2200      	movs	r2, #0
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fca4 	bl	80051cc <disk_ioctl>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <sync_fs+0xca>
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	41615252 	.word	0x41615252
 800589c:	61417272 	.word	0x61417272

080058a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	3b02      	subs	r3, #2
 80058ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	3b02      	subs	r3, #2
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d301      	bcc.n	80058c0 <clust2sect+0x20>
 80058bc:	2300      	movs	r3, #0
 80058be:	e008      	b.n	80058d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	895b      	ldrh	r3, [r3, #10]
 80058c4:	461a      	mov	r2, r3
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	fb03 f202 	mul.w	r2, r3, r2
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	4413      	add	r3, r2
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d904      	bls.n	80058fe <get_fat+0x20>
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <get_fat+0x26>
		val = 1;	/* Internal error */
 80058fe:	2301      	movs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	e08f      	b.n	8005a24 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d062      	beq.n	80059d8 <get_fat+0xfa>
 8005912:	2b03      	cmp	r3, #3
 8005914:	dc7c      	bgt.n	8005a10 <get_fat+0x132>
 8005916:	2b01      	cmp	r3, #1
 8005918:	d002      	beq.n	8005920 <get_fat+0x42>
 800591a:	2b02      	cmp	r3, #2
 800591c:	d042      	beq.n	80059a4 <get_fat+0xc6>
 800591e:	e077      	b.n	8005a10 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	0a5b      	lsrs	r3, r3, #9
 8005936:	4413      	add	r3, r2
 8005938:	4619      	mov	r1, r3
 800593a:	6938      	ldr	r0, [r7, #16]
 800593c:	f7ff ff14 	bl	8005768 <move_window>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d167      	bne.n	8005a16 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	60fa      	str	r2, [r7, #12]
 800594c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4413      	add	r3, r2
 8005954:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005958:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6a1a      	ldr	r2, [r3, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	0a5b      	lsrs	r3, r3, #9
 8005962:	4413      	add	r3, r2
 8005964:	4619      	mov	r1, r3
 8005966:	6938      	ldr	r0, [r7, #16]
 8005968:	f7ff fefe 	bl	8005768 <move_window>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d153      	bne.n	8005a1a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	461a      	mov	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <get_fat+0xbc>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	e002      	b.n	80059a0 <get_fat+0xc2>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	617b      	str	r3, [r7, #20]
			break;
 80059a2:	e03f      	b.n	8005a24 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	4413      	add	r3, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	6938      	ldr	r0, [r7, #16]
 80059b2:	f7ff fed9 	bl	8005768 <move_window>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d130      	bne.n	8005a1e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80059ca:	4413      	add	r3, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fc1b 	bl	8005208 <ld_word>
 80059d2:	4603      	mov	r3, r0
 80059d4:	617b      	str	r3, [r7, #20]
			break;
 80059d6:	e025      	b.n	8005a24 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	6a1a      	ldr	r2, [r3, #32]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	4413      	add	r3, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	6938      	ldr	r0, [r7, #16]
 80059e6:	f7ff febf 	bl	8005768 <move_window>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d118      	bne.n	8005a22 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80059fe:	4413      	add	r3, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fc19 	bl	8005238 <ld_dword>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a0c:	617b      	str	r3, [r7, #20]
			break;
 8005a0e:	e009      	b.n	8005a24 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e006      	b.n	8005a24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a16:	bf00      	nop
 8005a18:	e004      	b.n	8005a24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a22:	bf00      	nop
		}
	}

	return val;
 8005a24:	697b      	ldr	r3, [r7, #20]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005a2e:	b590      	push	{r4, r7, lr}
 8005a30:	b089      	sub	sp, #36	; 0x24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f240 80d9 	bls.w	8005bf8 <put_fat+0x1ca>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	f080 80d3 	bcs.w	8005bf8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	f000 8096 	beq.w	8005b88 <put_fat+0x15a>
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	f300 80cb 	bgt.w	8005bf8 <put_fat+0x1ca>
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d002      	beq.n	8005a6c <put_fat+0x3e>
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d06e      	beq.n	8005b48 <put_fat+0x11a>
 8005a6a:	e0c5      	b.n	8005bf8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4413      	add	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	0a5b      	lsrs	r3, r3, #9
 8005a82:	4413      	add	r3, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff fe6e 	bl	8005768 <move_window>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a90:	7ffb      	ldrb	r3, [r7, #31]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 80a9 	bne.w	8005bea <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	61b9      	str	r1, [r7, #24]
 8005aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa8:	4413      	add	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <put_fat+0xa4>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	b25a      	sxtb	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	4313      	orrs	r3, r2
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	e001      	b.n	8005ad6 <put_fat+0xa8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	0a5b      	lsrs	r3, r3, #9
 8005ae8:	4413      	add	r3, r2
 8005aea:	4619      	mov	r1, r3
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff fe3b 	bl	8005768 <move_window>
 8005af2:	4603      	mov	r3, r0
 8005af4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005af6:	7ffb      	ldrb	r3, [r7, #31]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d178      	bne.n	8005bee <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b08:	4413      	add	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <put_fat+0xf0>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	e00e      	b.n	8005b3c <put_fat+0x10e>
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	f023 030f 	bic.w	r3, r3, #15
 8005b28:	b25a      	sxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	70da      	strb	r2, [r3, #3]
			break;
 8005b46:	e057      	b.n	8005bf8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	4413      	add	r3, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff fe07 	bl	8005768 <move_window>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d146      	bne.n	8005bf2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005b72:	4413      	add	r3, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	b292      	uxth	r2, r2
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fb7f 	bl	800527e <st_word>
			fs->wflag = 1;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	70da      	strb	r2, [r3, #3]
			break;
 8005b86:	e037      	b.n	8005bf8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	4413      	add	r3, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fde7 	bl	8005768 <move_window>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d128      	bne.n	8005bf6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005bb8:	4413      	add	r3, r2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fb3c 	bl	8005238 <ld_dword>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005bc6:	4323      	orrs	r3, r4
 8005bc8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005bd8:	4413      	add	r3, r2
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fb69 	bl	80052b4 <st_dword>
			fs->wflag = 1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	70da      	strb	r2, [r3, #3]
			break;
 8005be8:	e006      	b.n	8005bf8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005bea:	bf00      	nop
 8005bec:	e004      	b.n	8005bf8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005bee:	bf00      	nop
 8005bf0:	e002      	b.n	8005bf8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005bf6:	bf00      	nop
		}
	}
	return res;
 8005bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}

08005c02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b088      	sub	sp, #32
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d904      	bls.n	8005c28 <remove_chain+0x26>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d301      	bcc.n	8005c2c <remove_chain+0x2a>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e04b      	b.n	8005cc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	69b8      	ldr	r0, [r7, #24]
 8005c3a:	f7ff fef8 	bl	8005a2e <put_fat>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005c42:	7ffb      	ldrb	r3, [r7, #31]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <remove_chain+0x4a>
 8005c48:	7ffb      	ldrb	r3, [r7, #31]
 8005c4a:	e03b      	b.n	8005cc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fe45 	bl	80058de <get_fat>
 8005c54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d031      	beq.n	8005cc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <remove_chain+0x64>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e02e      	b.n	8005cc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d101      	bne.n	8005c72 <remove_chain+0x70>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e028      	b.n	8005cc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c72:	2200      	movs	r2, #0
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	69b8      	ldr	r0, [r7, #24]
 8005c78:	f7ff fed9 	bl	8005a2e <put_fat>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c80:	7ffb      	ldrb	r3, [r7, #31]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <remove_chain+0x88>
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	e01c      	b.n	8005cc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	3b02      	subs	r3, #2
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d20b      	bcs.n	8005cb0 <remove_chain+0xae>
			fs->free_clst++;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	791b      	ldrb	r3, [r3, #4]
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d3c6      	bcc.n	8005c4c <remove_chain+0x4a>
 8005cbe:	e000      	b.n	8005cc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005cc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10d      	bne.n	8005cfe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d004      	beq.n	8005cf8 <create_chain+0x2c>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d31b      	bcc.n	8005d30 <create_chain+0x64>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	e018      	b.n	8005d30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff fdec 	bl	80058de <get_fat>
 8005d06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d801      	bhi.n	8005d12 <create_chain+0x46>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e070      	b.n	8005df4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d101      	bne.n	8005d1e <create_chain+0x52>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	e06a      	b.n	8005df4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d201      	bcs.n	8005d2c <create_chain+0x60>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	e063      	b.n	8005df4 <create_chain+0x128>
		scl = clst;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	3301      	adds	r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d307      	bcc.n	8005d54 <create_chain+0x88>
				ncl = 2;
 8005d44:	2302      	movs	r3, #2
 8005d46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d901      	bls.n	8005d54 <create_chain+0x88>
 8005d50:	2300      	movs	r3, #0
 8005d52:	e04f      	b.n	8005df4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d54:	69f9      	ldr	r1, [r7, #28]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fdc1 	bl	80058de <get_fat>
 8005d5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d003      	beq.n	8005d72 <create_chain+0xa6>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d101      	bne.n	8005d76 <create_chain+0xaa>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	e03e      	b.n	8005df4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d1da      	bne.n	8005d34 <create_chain+0x68>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e038      	b.n	8005df4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	6938      	ldr	r0, [r7, #16]
 8005d8c:	f7ff fe4f 	bl	8005a2e <put_fat>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <create_chain+0xe2>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d006      	beq.n	8005dae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6938      	ldr	r0, [r7, #16]
 8005da6:	f7ff fe42 	bl	8005a2e <put_fat>
 8005daa:	4603      	mov	r3, r0
 8005dac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d116      	bne.n	8005de2 <create_chain+0x116>
		fs->last_clst = ncl;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	3b02      	subs	r3, #2
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d804      	bhi.n	8005dd2 <create_chain+0x106>
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	1e5a      	subs	r2, r3, #1
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	791b      	ldrb	r3, [r3, #4]
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	711a      	strb	r2, [r3, #4]
 8005de0:	e007      	b.n	8005df2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d102      	bne.n	8005dee <create_chain+0x122>
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dec:	e000      	b.n	8005df0 <create_chain+0x124>
 8005dee:	2301      	movs	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005df2:	69fb      	ldr	r3, [r7, #28]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	3304      	adds	r3, #4
 8005e12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	0a5b      	lsrs	r3, r3, #9
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	8952      	ldrh	r2, [r2, #10]
 8005e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1d1a      	adds	r2, r3, #4
 8005e26:	613a      	str	r2, [r7, #16]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <clmt_clust+0x3a>
 8005e32:	2300      	movs	r3, #0
 8005e34:	e010      	b.n	8005e58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d307      	bcc.n	8005e4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e4c:	e7e9      	b.n	8005e22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005e4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	4413      	add	r3, r2
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e7a:	d204      	bcs.n	8005e86 <dir_sdi+0x22>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e86:	2302      	movs	r3, #2
 8005e88:	e063      	b.n	8005f52 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <dir_sdi+0x46>
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d902      	bls.n	8005eaa <dir_sdi+0x46>
		clst = fs->dirbase;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10c      	bne.n	8005eca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	8912      	ldrh	r2, [r2, #8]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d301      	bcc.n	8005ec0 <dir_sdi+0x5c>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e048      	b.n	8005f52 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	61da      	str	r2, [r3, #28]
 8005ec8:	e029      	b.n	8005f1e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	895b      	ldrh	r3, [r3, #10]
 8005ece:	025b      	lsls	r3, r3, #9
 8005ed0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ed2:	e019      	b.n	8005f08 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fd00 	bl	80058de <get_fat>
 8005ede:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d101      	bne.n	8005eec <dir_sdi+0x88>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e032      	b.n	8005f52 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d904      	bls.n	8005efc <dir_sdi+0x98>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d301      	bcc.n	8005f00 <dir_sdi+0x9c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e028      	b.n	8005f52 <dir_sdi+0xee>
			ofs -= csz;
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d2e1      	bcs.n	8005ed4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005f10:	6979      	ldr	r1, [r7, #20]
 8005f12:	6938      	ldr	r0, [r7, #16]
 8005f14:	f7ff fcc4 	bl	80058a0 <clust2sect>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <dir_sdi+0xcc>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e010      	b.n	8005f52 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	0a5b      	lsrs	r3, r3, #9
 8005f38:	441a      	add	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	441a      	add	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	3320      	adds	r3, #32
 8005f70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <dir_next+0x28>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f80:	d301      	bcc.n	8005f86 <dir_next+0x2c>
 8005f82:	2304      	movs	r3, #4
 8005f84:	e0aa      	b.n	80060dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 8098 	bne.w	80060c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10b      	bne.n	8005fbc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	8912      	ldrh	r2, [r2, #8]
 8005fac:	4293      	cmp	r3, r2
 8005fae:	f0c0 8088 	bcc.w	80060c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	61da      	str	r2, [r3, #28]
 8005fb8:	2304      	movs	r3, #4
 8005fba:	e08f      	b.n	80060dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	0a5b      	lsrs	r3, r3, #9
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	8952      	ldrh	r2, [r2, #10]
 8005fc4:	3a01      	subs	r2, #1
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d17a      	bne.n	80060c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7ff fc82 	bl	80058de <get_fat>
 8005fda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d801      	bhi.n	8005fe6 <dir_next+0x8c>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e07a      	b.n	80060dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d101      	bne.n	8005ff2 <dir_next+0x98>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e074      	b.n	80060dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d358      	bcc.n	80060ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	61da      	str	r2, [r3, #28]
 8006008:	2304      	movs	r3, #4
 800600a:	e067      	b.n	80060dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f7ff fe59 	bl	8005ccc <create_chain>
 800601a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <dir_next+0xcc>
 8006022:	2307      	movs	r3, #7
 8006024:	e05a      	b.n	80060dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <dir_next+0xd6>
 800602c:	2302      	movs	r3, #2
 800602e:	e055      	b.n	80060dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d101      	bne.n	800603c <dir_next+0xe2>
 8006038:	2301      	movs	r3, #1
 800603a:	e04f      	b.n	80060dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff fb4f 	bl	80056e0 <sync_window>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <dir_next+0xf2>
 8006048:	2301      	movs	r3, #1
 800604a:	e047      	b.n	80060dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3330      	adds	r3, #48	; 0x30
 8006050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff f979 	bl	800534e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	6979      	ldr	r1, [r7, #20]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff fc1c 	bl	80058a0 <clust2sect>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	62da      	str	r2, [r3, #44]	; 0x2c
 800606e:	e012      	b.n	8006096 <dir_next+0x13c>
						fs->wflag = 1;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff fb32 	bl	80056e0 <sync_window>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <dir_next+0x12c>
 8006082:	2301      	movs	r3, #1
 8006084:	e02a      	b.n	80060dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3301      	adds	r3, #1
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	62da      	str	r2, [r3, #44]	; 0x2c
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	895b      	ldrh	r3, [r3, #10]
 800609a:	461a      	mov	r2, r3
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4293      	cmp	r3, r2
 80060a0:	d3e6      	bcc.n	8006070 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad2      	subs	r2, r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80060b4:	6979      	ldr	r1, [r7, #20]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fbf2 	bl	80058a0 <clust2sect>
 80060bc:	4602      	mov	r2, r0
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80060f4:	2100      	movs	r1, #0
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff feb4 	bl	8005e64 <dir_sdi>
 80060fc:	4603      	mov	r3, r0
 80060fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d12b      	bne.n	800615e <dir_alloc+0x7a>
		n = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	4619      	mov	r1, r3
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fb29 	bl	8005768 <move_window>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11d      	bne.n	800615c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2be5      	cmp	r3, #229	; 0xe5
 8006128:	d004      	beq.n	8006134 <dir_alloc+0x50>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	3301      	adds	r3, #1
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d102      	bne.n	8006148 <dir_alloc+0x64>
 8006142:	e00c      	b.n	800615e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006144:	2300      	movs	r3, #0
 8006146:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006148:	2101      	movs	r1, #1
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ff05 	bl	8005f5a <dir_next>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0d7      	beq.n	800610a <dir_alloc+0x26>
 800615a:	e000      	b.n	800615e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800615c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d101      	bne.n	8006168 <dir_alloc+0x84>
 8006164:	2307      	movs	r3, #7
 8006166:	75fb      	strb	r3, [r7, #23]
	return res;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	331a      	adds	r3, #26
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff f841 	bl	8005208 <ld_word>
 8006186:	4603      	mov	r3, r0
 8006188:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d109      	bne.n	80061a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	3314      	adds	r3, #20
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff f836 	bl	8005208 <ld_word>
 800619c:	4603      	mov	r3, r0
 800619e:	041b      	lsls	r3, r3, #16
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	331a      	adds	r3, #26
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	b292      	uxth	r2, r2
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f859 	bl	800527e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d109      	bne.n	80061e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f103 0214 	add.w	r2, r3, #20
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7ff f84b 	bl	800527e <st_word>
	}
}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80061fa:	2304      	movs	r3, #4
 80061fc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006204:	e03c      	b.n	8006280 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	4619      	mov	r1, r3
 800620c:	6938      	ldr	r0, [r7, #16]
 800620e:	f7ff faab 	bl	8005768 <move_window>
 8006212:	4603      	mov	r3, r0
 8006214:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d136      	bne.n	800628a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800622a:	2304      	movs	r3, #4
 800622c:	75fb      	strb	r3, [r7, #23]
 800622e:	e031      	b.n	8006294 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	330b      	adds	r3, #11
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	73bb      	strb	r3, [r7, #14]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	7bba      	ldrb	r2, [r7, #14]
 8006242:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2be5      	cmp	r3, #229	; 0xe5
 8006248:	d011      	beq.n	800626e <dir_read+0x7e>
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b2e      	cmp	r3, #46	; 0x2e
 800624e:	d00e      	beq.n	800626e <dir_read+0x7e>
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	2b0f      	cmp	r3, #15
 8006254:	d00b      	beq.n	800626e <dir_read+0x7e>
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	f023 0320 	bic.w	r3, r3, #32
 800625c:	2b08      	cmp	r3, #8
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	4293      	cmp	r3, r2
 800626c:	d00f      	beq.n	800628e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800626e:	2100      	movs	r1, #0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fe72 	bl	8005f5a <dir_next>
 8006276:	4603      	mov	r3, r0
 8006278:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d108      	bne.n	8006292 <dir_read+0xa2>
	while (dp->sect) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1be      	bne.n	8006206 <dir_read+0x16>
 8006288:	e004      	b.n	8006294 <dir_read+0xa4>
		if (res != FR_OK) break;
 800628a:	bf00      	nop
 800628c:	e002      	b.n	8006294 <dir_read+0xa4>
				break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006292:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <dir_read+0xb0>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	61da      	str	r2, [r3, #28]
	return res;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b086      	sub	sp, #24
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80062b8:	2100      	movs	r1, #0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fdd2 	bl	8005e64 <dir_sdi>
 80062c0:	4603      	mov	r3, r0
 80062c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <dir_find+0x24>
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	e03e      	b.n	800634c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6938      	ldr	r0, [r7, #16]
 80062d6:	f7ff fa47 	bl	8005768 <move_window>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d12f      	bne.n	8006344 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <dir_find+0x4e>
 80062f2:	2304      	movs	r3, #4
 80062f4:	75fb      	strb	r3, [r7, #23]
 80062f6:	e028      	b.n	800634a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	330b      	adds	r3, #11
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006304:	b2da      	uxtb	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	330b      	adds	r3, #11
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <dir_find+0x86>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a18      	ldr	r0, [r3, #32]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3324      	adds	r3, #36	; 0x24
 8006322:	220b      	movs	r2, #11
 8006324:	4619      	mov	r1, r3
 8006326:	f7ff f82d 	bl	8005384 <mem_cmp>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fe11 	bl	8005f5a <dir_next>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0c5      	beq.n	80062ce <dir_find+0x24>
 8006342:	e002      	b.n	800634a <dir_find+0xa0>
		if (res != FR_OK) break;
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006348:	bf00      	nop

	return res;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006362:	2101      	movs	r1, #1
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff febd 	bl	80060e4 <dir_alloc>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d11c      	bne.n	80063ae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	4619      	mov	r1, r3
 800637a:	68b8      	ldr	r0, [r7, #8]
 800637c:	f7ff f9f4 	bl	8005768 <move_window>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d111      	bne.n	80063ae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	2220      	movs	r2, #32
 8006390:	2100      	movs	r1, #0
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe ffdb 	bl	800534e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a18      	ldr	r0, [r3, #32]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3324      	adds	r3, #36	; 0x24
 80063a0:	220b      	movs	r2, #11
 80063a2:	4619      	mov	r1, r3
 80063a4:	f7fe ffb2 	bl	800530c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2201      	movs	r2, #1
 80063ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2200      	movs	r2, #0
 80063c6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d04e      	beq.n	800646e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80063d8:	e021      	b.n	800641e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1a      	ldr	r2, [r3, #32]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	1c59      	adds	r1, r3, #1
 80063e2:	6179      	str	r1, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d100      	bne.n	80063f2 <get_fileinfo+0x3a>
 80063f0:	e015      	b.n	800641e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b05      	cmp	r3, #5
 80063f6:	d101      	bne.n	80063fc <get_fileinfo+0x44>
 80063f8:	23e5      	movs	r3, #229	; 0xe5
 80063fa:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b09      	cmp	r3, #9
 8006400:	d106      	bne.n	8006410 <get_fileinfo+0x58>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	613a      	str	r2, [r7, #16]
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	4413      	add	r3, r2
 800640c:	222e      	movs	r2, #46	; 0x2e
 800640e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	613a      	str	r2, [r7, #16]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	4413      	add	r3, r2
 800641a:	7bfa      	ldrb	r2, [r7, #15]
 800641c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b0a      	cmp	r3, #10
 8006422:	d9da      	bls.n	80063da <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	4413      	add	r3, r2
 800642a:	3309      	adds	r3, #9
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	7ada      	ldrb	r2, [r3, #11]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	331c      	adds	r3, #28
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe fef9 	bl	8005238 <ld_dword>
 8006446:	4602      	mov	r2, r0
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	3316      	adds	r3, #22
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fef0 	bl	8005238 <ld_dword>
 8006458:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	b29a      	uxth	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	80da      	strh	r2, [r3, #6]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	0c1b      	lsrs	r3, r3, #16
 8006466:	b29a      	uxth	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	809a      	strh	r2, [r3, #4]
 800646c:	e000      	b.n	8006470 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800646e:	bf00      	nop
}
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3324      	adds	r3, #36	; 0x24
 800648c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800648e:	220b      	movs	r2, #11
 8006490:	2120      	movs	r1, #32
 8006492:	68b8      	ldr	r0, [r7, #8]
 8006494:	f7fe ff5b 	bl	800534e <mem_set>
	si = i = 0; ni = 8;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	2308      	movs	r3, #8
 80064a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	61fa      	str	r2, [r7, #28]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80064b2:	7efb      	ldrb	r3, [r7, #27]
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d94e      	bls.n	8006556 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80064b8:	7efb      	ldrb	r3, [r7, #27]
 80064ba:	2b2f      	cmp	r3, #47	; 0x2f
 80064bc:	d006      	beq.n	80064cc <create_name+0x54>
 80064be:	7efb      	ldrb	r3, [r7, #27]
 80064c0:	2b5c      	cmp	r3, #92	; 0x5c
 80064c2:	d110      	bne.n	80064e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80064c4:	e002      	b.n	80064cc <create_name+0x54>
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	3301      	adds	r3, #1
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b2f      	cmp	r3, #47	; 0x2f
 80064d6:	d0f6      	beq.n	80064c6 <create_name+0x4e>
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b5c      	cmp	r3, #92	; 0x5c
 80064e2:	d0f0      	beq.n	80064c6 <create_name+0x4e>
			break;
 80064e4:	e038      	b.n	8006558 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80064e6:	7efb      	ldrb	r3, [r7, #27]
 80064e8:	2b2e      	cmp	r3, #46	; 0x2e
 80064ea:	d003      	beq.n	80064f4 <create_name+0x7c>
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d30c      	bcc.n	800650e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b0b      	cmp	r3, #11
 80064f8:	d002      	beq.n	8006500 <create_name+0x88>
 80064fa:	7efb      	ldrb	r3, [r7, #27]
 80064fc:	2b2e      	cmp	r3, #46	; 0x2e
 80064fe:	d001      	beq.n	8006504 <create_name+0x8c>
 8006500:	2306      	movs	r3, #6
 8006502:	e044      	b.n	800658e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006504:	2308      	movs	r3, #8
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	230b      	movs	r3, #11
 800650a:	617b      	str	r3, [r7, #20]
			continue;
 800650c:	e022      	b.n	8006554 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800650e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006512:	2b00      	cmp	r3, #0
 8006514:	da04      	bge.n	8006520 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006516:	7efb      	ldrb	r3, [r7, #27]
 8006518:	3b80      	subs	r3, #128	; 0x80
 800651a:	4a1f      	ldr	r2, [pc, #124]	; (8006598 <create_name+0x120>)
 800651c:	5cd3      	ldrb	r3, [r2, r3]
 800651e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006520:	7efb      	ldrb	r3, [r7, #27]
 8006522:	4619      	mov	r1, r3
 8006524:	481d      	ldr	r0, [pc, #116]	; (800659c <create_name+0x124>)
 8006526:	f7fe ff54 	bl	80053d2 <chk_chr>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <create_name+0xbc>
 8006530:	2306      	movs	r3, #6
 8006532:	e02c      	b.n	800658e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006534:	7efb      	ldrb	r3, [r7, #27]
 8006536:	2b60      	cmp	r3, #96	; 0x60
 8006538:	d905      	bls.n	8006546 <create_name+0xce>
 800653a:	7efb      	ldrb	r3, [r7, #27]
 800653c:	2b7a      	cmp	r3, #122	; 0x7a
 800653e:	d802      	bhi.n	8006546 <create_name+0xce>
 8006540:	7efb      	ldrb	r3, [r7, #27]
 8006542:	3b20      	subs	r3, #32
 8006544:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	613a      	str	r2, [r7, #16]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	4413      	add	r3, r2
 8006550:	7efa      	ldrb	r2, [r7, #27]
 8006552:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006554:	e7a6      	b.n	80064a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006556:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	441a      	add	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <create_name+0xf4>
 8006568:	2306      	movs	r3, #6
 800656a:	e010      	b.n	800658e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2be5      	cmp	r3, #229	; 0xe5
 8006572:	d102      	bne.n	800657a <create_name+0x102>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2205      	movs	r2, #5
 8006578:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800657a:	7efb      	ldrb	r3, [r7, #27]
 800657c:	2b20      	cmp	r3, #32
 800657e:	d801      	bhi.n	8006584 <create_name+0x10c>
 8006580:	2204      	movs	r2, #4
 8006582:	e000      	b.n	8006586 <create_name+0x10e>
 8006584:	2200      	movs	r2, #0
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	330b      	adds	r3, #11
 800658a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800658c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	08009788 	.word	0x08009788
 800659c:	08008258 	.word	0x08008258

080065a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80065b4:	e002      	b.n	80065bc <follow_path+0x1c>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b2f      	cmp	r3, #47	; 0x2f
 80065c2:	d0f8      	beq.n	80065b6 <follow_path+0x16>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b5c      	cmp	r3, #92	; 0x5c
 80065ca:	d0f4      	beq.n	80065b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b1f      	cmp	r3, #31
 80065d8:	d80a      	bhi.n	80065f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2280      	movs	r2, #128	; 0x80
 80065de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80065e2:	2100      	movs	r1, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fc3d 	bl	8005e64 <dir_sdi>
 80065ea:	4603      	mov	r3, r0
 80065ec:	75fb      	strb	r3, [r7, #23]
 80065ee:	e043      	b.n	8006678 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065f0:	463b      	mov	r3, r7
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ff3f 	bl	8006478 <create_name>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d134      	bne.n	800666e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff fe50 	bl	80062aa <dir_find>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006614:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b04      	cmp	r3, #4
 8006620:	d127      	bne.n	8006672 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d122      	bne.n	8006672 <follow_path+0xd2>
 800662c:	2305      	movs	r3, #5
 800662e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006630:	e01f      	b.n	8006672 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11c      	bne.n	8006676 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	799b      	ldrb	r3, [r3, #6]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006648:	2305      	movs	r3, #5
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	e014      	b.n	8006678 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665c:	4413      	add	r3, r2
 800665e:	4619      	mov	r1, r3
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff fd86 	bl	8006172 <ld_clust>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800666c:	e7c0      	b.n	80065f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800666e:	bf00      	nop
 8006670:	e002      	b.n	8006678 <follow_path+0xd8>
				break;
 8006672:	bf00      	nop
 8006674:	e000      	b.n	8006678 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006676:	bf00      	nop
			}
		}
	}

	return res;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006682:	b480      	push	{r7}
 8006684:	b087      	sub	sp, #28
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800668a:	f04f 33ff 	mov.w	r3, #4294967295
 800668e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d031      	beq.n	80066fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e002      	b.n	80066a6 <get_ldnumber+0x24>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3301      	adds	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d903      	bls.n	80066b6 <get_ldnumber+0x34>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b3a      	cmp	r3, #58	; 0x3a
 80066b4:	d1f4      	bne.n	80066a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b3a      	cmp	r3, #58	; 0x3a
 80066bc:	d11c      	bne.n	80066f8 <get_ldnumber+0x76>
			tp = *path;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	60fa      	str	r2, [r7, #12]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	3b30      	subs	r3, #48	; 0x30
 80066ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	d80e      	bhi.n	80066f4 <get_ldnumber+0x72>
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d10a      	bne.n	80066f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d107      	bne.n	80066f4 <get_ldnumber+0x72>
					vol = (int)i;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3301      	adds	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	e002      	b.n	80066fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80066f8:	2300      	movs	r3, #0
 80066fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80066fc:	693b      	ldr	r3, [r7, #16]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	70da      	strb	r2, [r3, #3]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f04f 32ff 	mov.w	r2, #4294967295
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff f81e 	bl	8005768 <move_window>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <check_fs+0x2a>
 8006732:	2304      	movs	r3, #4
 8006734:	e038      	b.n	80067a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3330      	adds	r3, #48	; 0x30
 800673a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fd62 	bl	8005208 <ld_word>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800674c:	429a      	cmp	r2, r3
 800674e:	d001      	beq.n	8006754 <check_fs+0x48>
 8006750:	2303      	movs	r3, #3
 8006752:	e029      	b.n	80067a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800675a:	2be9      	cmp	r3, #233	; 0xe9
 800675c:	d009      	beq.n	8006772 <check_fs+0x66>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006764:	2beb      	cmp	r3, #235	; 0xeb
 8006766:	d11e      	bne.n	80067a6 <check_fs+0x9a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800676e:	2b90      	cmp	r3, #144	; 0x90
 8006770:	d119      	bne.n	80067a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3330      	adds	r3, #48	; 0x30
 8006776:	3336      	adds	r3, #54	; 0x36
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fd5d 	bl	8005238 <ld_dword>
 800677e:	4603      	mov	r3, r0
 8006780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006784:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <check_fs+0xa4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <check_fs+0x82>
 800678a:	2300      	movs	r3, #0
 800678c:	e00c      	b.n	80067a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3330      	adds	r3, #48	; 0x30
 8006792:	3352      	adds	r3, #82	; 0x52
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe fd4f 	bl	8005238 <ld_dword>
 800679a:	4603      	mov	r3, r0
 800679c:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <check_fs+0xa8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d101      	bne.n	80067a6 <check_fs+0x9a>
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80067a6:	2302      	movs	r3, #2
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	00544146 	.word	0x00544146
 80067b4:	33544146 	.word	0x33544146

080067b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b096      	sub	sp, #88	; 0x58
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ff58 	bl	8006682 <get_ldnumber>
 80067d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80067d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da01      	bge.n	80067de <find_volume+0x26>
 80067da:	230b      	movs	r3, #11
 80067dc:	e22d      	b.n	8006c3a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80067de:	4aa1      	ldr	r2, [pc, #644]	; (8006a64 <find_volume+0x2ac>)
 80067e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <find_volume+0x3a>
 80067ee:	230c      	movs	r3, #12
 80067f0:	e223      	b.n	8006c3a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01a      	beq.n	800683e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe fc5d 	bl	80050cc <disk_status>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10c      	bne.n	800683e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <find_volume+0x82>
 800682a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006836:	230a      	movs	r3, #10
 8006838:	e1ff      	b.n	8006c3a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800683a:	2300      	movs	r3, #0
 800683c:	e1fd      	b.n	8006c3a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe fc55 	bl	8005100 <disk_initialize>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800685c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006868:	2303      	movs	r3, #3
 800686a:	e1e6      	b.n	8006c3a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <find_volume+0xca>
 8006872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800687e:	230a      	movs	r3, #10
 8006880:	e1db      	b.n	8006c3a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800688a:	f7ff ff3f 	bl	800670c <check_fs>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006898:	2b02      	cmp	r3, #2
 800689a:	d149      	bne.n	8006930 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800689c:	2300      	movs	r3, #0
 800689e:	643b      	str	r3, [r7, #64]	; 0x40
 80068a0:	e01e      	b.n	80068e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80068b0:	4413      	add	r3, r2
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	3304      	adds	r3, #4
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d006      	beq.n	80068cc <find_volume+0x114>
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	3308      	adds	r3, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fcb8 	bl	8005238 <ld_dword>
 80068c8:	4602      	mov	r2, r0
 80068ca:	e000      	b.n	80068ce <find_volume+0x116>
 80068cc:	2200      	movs	r2, #0
 80068ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	3358      	adds	r3, #88	; 0x58
 80068d4:	443b      	add	r3, r7
 80068d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80068da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068dc:	3301      	adds	r3, #1
 80068de:	643b      	str	r3, [r7, #64]	; 0x40
 80068e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d9dd      	bls.n	80068a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80068e6:	2300      	movs	r3, #0
 80068e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80068ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <find_volume+0x13e>
 80068f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f2:	3b01      	subs	r3, #1
 80068f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80068f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	3358      	adds	r3, #88	; 0x58
 80068fc:	443b      	add	r3, r7
 80068fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006902:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <find_volume+0x15e>
 800690a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800690c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800690e:	f7ff fefd 	bl	800670c <check_fs>
 8006912:	4603      	mov	r3, r0
 8006914:	e000      	b.n	8006918 <find_volume+0x160>
 8006916:	2303      	movs	r3, #3
 8006918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800691c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006920:	2b01      	cmp	r3, #1
 8006922:	d905      	bls.n	8006930 <find_volume+0x178>
 8006924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006926:	3301      	adds	r3, #1
 8006928:	643b      	str	r3, [r7, #64]	; 0x40
 800692a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692c:	2b03      	cmp	r3, #3
 800692e:	d9e2      	bls.n	80068f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006934:	2b04      	cmp	r3, #4
 8006936:	d101      	bne.n	800693c <find_volume+0x184>
 8006938:	2301      	movs	r3, #1
 800693a:	e17e      	b.n	8006c3a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800693c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006940:	2b01      	cmp	r3, #1
 8006942:	d901      	bls.n	8006948 <find_volume+0x190>
 8006944:	230d      	movs	r3, #13
 8006946:	e178      	b.n	8006c3a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	3330      	adds	r3, #48	; 0x30
 800694c:	330b      	adds	r3, #11
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fc5a 	bl	8005208 <ld_word>
 8006954:	4603      	mov	r3, r0
 8006956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695a:	d001      	beq.n	8006960 <find_volume+0x1a8>
 800695c:	230d      	movs	r3, #13
 800695e:	e16c      	b.n	8006c3a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	3330      	adds	r3, #48	; 0x30
 8006964:	3316      	adds	r3, #22
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fc4e 	bl	8005208 <ld_word>
 800696c:	4603      	mov	r3, r0
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <find_volume+0x1cc>
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	3330      	adds	r3, #48	; 0x30
 800697a:	3324      	adds	r3, #36	; 0x24
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fc5b 	bl	8005238 <ld_dword>
 8006982:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006988:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	789b      	ldrb	r3, [r3, #2]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d005      	beq.n	80069a8 <find_volume+0x1f0>
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	789b      	ldrb	r3, [r3, #2]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d001      	beq.n	80069a8 <find_volume+0x1f0>
 80069a4:	230d      	movs	r3, #13
 80069a6:	e148      	b.n	8006c3a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	789b      	ldrb	r3, [r3, #2]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b0:	fb02 f303 	mul.w	r3, r2, r3
 80069b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	895b      	ldrh	r3, [r3, #10]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d008      	beq.n	80069dc <find_volume+0x224>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	895b      	ldrh	r3, [r3, #10]
 80069ce:	461a      	mov	r2, r3
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	895b      	ldrh	r3, [r3, #10]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <find_volume+0x228>
 80069dc:	230d      	movs	r3, #13
 80069de:	e12c      	b.n	8006c3a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	3330      	adds	r3, #48	; 0x30
 80069e4:	3311      	adds	r3, #17
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fc0e 	bl	8005208 <ld_word>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	891b      	ldrh	r3, [r3, #8]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <find_volume+0x24e>
 8006a02:	230d      	movs	r3, #13
 8006a04:	e119      	b.n	8006c3a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	3330      	adds	r3, #48	; 0x30
 8006a0a:	3313      	adds	r3, #19
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fbfb 	bl	8005208 <ld_word>
 8006a12:	4603      	mov	r3, r0
 8006a14:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <find_volume+0x272>
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	3330      	adds	r3, #48	; 0x30
 8006a20:	3320      	adds	r3, #32
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fc08 	bl	8005238 <ld_dword>
 8006a28:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	3330      	adds	r3, #48	; 0x30
 8006a2e:	330e      	adds	r3, #14
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe fbe9 	bl	8005208 <ld_word>
 8006a36:	4603      	mov	r3, r0
 8006a38:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006a3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <find_volume+0x28c>
 8006a40:	230d      	movs	r3, #13
 8006a42:	e0fa      	b.n	8006c3a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006a44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a48:	4413      	add	r3, r2
 8006a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a4c:	8912      	ldrh	r2, [r2, #8]
 8006a4e:	0912      	lsrs	r2, r2, #4
 8006a50:	b292      	uxth	r2, r2
 8006a52:	4413      	add	r3, r2
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d204      	bcs.n	8006a68 <find_volume+0x2b0>
 8006a5e:	230d      	movs	r3, #13
 8006a60:	e0eb      	b.n	8006c3a <find_volume+0x482>
 8006a62:	bf00      	nop
 8006a64:	200009ec 	.word	0x200009ec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a70:	8952      	ldrh	r2, [r2, #10]
 8006a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <find_volume+0x2ca>
 8006a7e:	230d      	movs	r3, #13
 8006a80:	e0db      	b.n	8006c3a <find_volume+0x482>
		fmt = FS_FAT32;
 8006a82:	2303      	movs	r3, #3
 8006a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d802      	bhi.n	8006a98 <find_volume+0x2e0>
 8006a92:	2302      	movs	r3, #2
 8006a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d802      	bhi.n	8006aa8 <find_volume+0x2f0>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ab4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ab6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aba:	441a      	add	r2, r3
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006ac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	441a      	add	r2, r3
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006aca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d11e      	bne.n	8006b10 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	3330      	adds	r3, #48	; 0x30
 8006ad6:	332a      	adds	r3, #42	; 0x2a
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fb95 	bl	8005208 <ld_word>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <find_volume+0x330>
 8006ae4:	230d      	movs	r3, #13
 8006ae6:	e0a8      	b.n	8006c3a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	891b      	ldrh	r3, [r3, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <find_volume+0x33c>
 8006af0:	230d      	movs	r3, #13
 8006af2:	e0a2      	b.n	8006c3a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	3330      	adds	r3, #48	; 0x30
 8006af8:	332c      	adds	r3, #44	; 0x2c
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fb9c 	bl	8005238 <ld_dword>
 8006b00:	4602      	mov	r2, r0
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0e:	e01f      	b.n	8006b50 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	891b      	ldrh	r3, [r3, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <find_volume+0x364>
 8006b18:	230d      	movs	r3, #13
 8006b1a:	e08e      	b.n	8006c3a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	6a1a      	ldr	r2, [r3, #32]
 8006b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b22:	441a      	add	r2, r3
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d103      	bne.n	8006b38 <find_volume+0x380>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	e00a      	b.n	8006b4e <find_volume+0x396>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	4413      	add	r3, r2
 8006b42:	085a      	lsrs	r2, r3, #1
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b56:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006b5a:	0a5b      	lsrs	r3, r3, #9
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d201      	bcs.n	8006b64 <find_volume+0x3ac>
 8006b60:	230d      	movs	r3, #13
 8006b62:	e06a      	b.n	8006c3a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6a:	611a      	str	r2, [r3, #16]
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	2280      	movs	r2, #128	; 0x80
 8006b78:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d149      	bne.n	8006c16 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	3330      	adds	r3, #48	; 0x30
 8006b86:	3330      	adds	r3, #48	; 0x30
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fb3d 	bl	8005208 <ld_word>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d140      	bne.n	8006c16 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b96:	3301      	adds	r3, #1
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b9c:	f7fe fde4 	bl	8005768 <move_window>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d137      	bne.n	8006c16 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	2200      	movs	r2, #0
 8006baa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	3330      	adds	r3, #48	; 0x30
 8006bb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fb27 	bl	8005208 <ld_word>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d127      	bne.n	8006c16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	3330      	adds	r3, #48	; 0x30
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fb34 	bl	8005238 <ld_dword>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <find_volume+0x48c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d11e      	bne.n	8006c16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	3330      	adds	r3, #48	; 0x30
 8006bdc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe fb29 	bl	8005238 <ld_dword>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <find_volume+0x490>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d113      	bne.n	8006c16 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	3330      	adds	r3, #48	; 0x30
 8006bf2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fb1e 	bl	8005238 <ld_dword>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	3330      	adds	r3, #48	; 0x30
 8006c06:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe fb14 	bl	8005238 <ld_dword>
 8006c10:	4602      	mov	r2, r0
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006c1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c1e:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <find_volume+0x494>)
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <find_volume+0x494>)
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	4b08      	ldr	r3, [pc, #32]	; (8006c4c <find_volume+0x494>)
 8006c2c:	881a      	ldrh	r2, [r3, #0]
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006c32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c34:	f7fe fd30 	bl	8005698 <clear_lock>
#endif
	return FR_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3758      	adds	r7, #88	; 0x58
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	41615252 	.word	0x41615252
 8006c48:	61417272 	.word	0x61417272
 8006c4c:	200009f0 	.word	0x200009f0

08006c50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c5a:	2309      	movs	r3, #9
 8006c5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01c      	beq.n	8006c9e <validate+0x4e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d018      	beq.n	8006c9e <validate+0x4e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d013      	beq.n	8006c9e <validate+0x4e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	889a      	ldrh	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	88db      	ldrh	r3, [r3, #6]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d10c      	bne.n	8006c9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fa1e 	bl	80050cc <disk_status>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <validate+0x4e>
			res = FR_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <validate+0x5a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	e000      	b.n	8006cac <validate+0x5c>
 8006caa:	2300      	movs	r3, #0
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	6013      	str	r3, [r2, #0]
	return res;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006cce:	f107 0310 	add.w	r3, r7, #16
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7ff fcd5 	bl	8006682 <get_ldnumber>
 8006cd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	da01      	bge.n	8006ce4 <f_mount+0x28>
 8006ce0:	230b      	movs	r3, #11
 8006ce2:	e02b      	b.n	8006d3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ce4:	4a17      	ldr	r2, [pc, #92]	; (8006d44 <f_mount+0x88>)
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006cf4:	69b8      	ldr	r0, [r7, #24]
 8006cf6:	f7fe fccf 	bl	8005698 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	490d      	ldr	r1, [pc, #52]	; (8006d44 <f_mount+0x88>)
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <f_mount+0x66>
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d001      	beq.n	8006d26 <f_mount+0x6a>
 8006d22:	2300      	movs	r3, #0
 8006d24:	e00a      	b.n	8006d3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006d26:	f107 010c 	add.w	r1, r7, #12
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	2200      	movs	r2, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fd41 	bl	80067b8 <find_volume>
 8006d36:	4603      	mov	r3, r0
 8006d38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	200009ec 	.word	0x200009ec

08006d48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b098      	sub	sp, #96	; 0x60
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <f_open+0x18>
 8006d5c:	2309      	movs	r3, #9
 8006d5e:	e1ad      	b.n	80070bc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d68:	79fa      	ldrb	r2, [r7, #7]
 8006d6a:	f107 0110 	add.w	r1, r7, #16
 8006d6e:	f107 0308 	add.w	r3, r7, #8
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fd20 	bl	80067b8 <find_volume>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f040 8191 	bne.w	80070aa <f_open+0x362>
		dj.obj.fs = fs;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	f107 0314 	add.w	r3, r7, #20
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fc03 	bl	80065a0 <follow_path>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11a      	bne.n	8006dde <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006da8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da03      	bge.n	8006dba <f_open+0x72>
				res = FR_INVALID_NAME;
 8006db2:	2306      	movs	r3, #6
 8006db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006db8:	e011      	b.n	8006dde <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bf14      	ite	ne
 8006dc4:	2301      	movne	r3, #1
 8006dc6:	2300      	moveq	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f107 0314 	add.w	r3, r7, #20
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe fb18 	bl	8005408 <chk_lock>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 031c 	and.w	r3, r3, #28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d07f      	beq.n	8006ee8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d017      	beq.n	8006e20 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d10e      	bne.n	8006e16 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006df8:	f7fe fb62 	bl	80054c0 <enq_lock>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d006      	beq.n	8006e10 <f_open+0xc8>
 8006e02:	f107 0314 	add.w	r3, r7, #20
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff faa4 	bl	8006354 <dir_register>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	e000      	b.n	8006e12 <f_open+0xca>
 8006e10:	2312      	movs	r3, #18
 8006e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	f043 0308 	orr.w	r3, r3, #8
 8006e1c:	71fb      	strb	r3, [r7, #7]
 8006e1e:	e010      	b.n	8006e42 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006e20:	7ebb      	ldrb	r3, [r7, #26]
 8006e22:	f003 0311 	and.w	r3, r3, #17
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <f_open+0xea>
					res = FR_DENIED;
 8006e2a:	2307      	movs	r3, #7
 8006e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e30:	e007      	b.n	8006e42 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <f_open+0xfa>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d168      	bne.n	8006f1c <f_open+0x1d4>
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d063      	beq.n	8006f1c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006e54:	f7fd ff9c 	bl	8004d90 <get_fattime>
 8006e58:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	330e      	adds	r3, #14
 8006e5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe fa27 	bl	80052b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	3316      	adds	r3, #22
 8006e6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe fa21 	bl	80052b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	330b      	adds	r3, #11
 8006e76:	2220      	movs	r2, #32
 8006e78:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e7e:	4611      	mov	r1, r2
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff f976 	bl	8006172 <ld_clust>
 8006e86:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff f98e 	bl	80061b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	331c      	adds	r3, #28
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fa0a 	bl	80052b4 <st_dword>
					fs->wflag = 1;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d037      	beq.n	8006f1c <f_open+0x1d4>
						dw = fs->winsect;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006eb2:	f107 0314 	add.w	r3, r7, #20
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fea1 	bl	8005c02 <remove_chain>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d126      	bne.n	8006f1c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fc48 	bl	8005768 <move_window>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ee2:	3a01      	subs	r2, #1
 8006ee4:	60da      	str	r2, [r3, #12]
 8006ee6:	e019      	b.n	8006f1c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d115      	bne.n	8006f1c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006ef0:	7ebb      	ldrb	r3, [r7, #26]
 8006ef2:	f003 0310 	and.w	r3, r3, #16
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006efa:	2304      	movs	r3, #4
 8006efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f00:	e00c      	b.n	8006f1c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <f_open+0x1d4>
 8006f0c:	7ebb      	ldrb	r3, [r7, #26]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <f_open+0x1d4>
						res = FR_DENIED;
 8006f16:	2307      	movs	r3, #7
 8006f18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d128      	bne.n	8006f76 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f34:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	f107 0314 	add.w	r3, r7, #20
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fad1 	bl	8005504 <inc_lock>
 8006f62:	4602      	mov	r2, r0
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <f_open+0x22e>
 8006f70:	2302      	movs	r3, #2
 8006f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 8095 	bne.w	80070aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff f8f3 	bl	8006172 <ld_clust>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	331c      	adds	r3, #28
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe f94e 	bl	8005238 <ld_dword>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	88da      	ldrh	r2, [r3, #6]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	79fa      	ldrb	r2, [r7, #7]
 8006fba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3330      	adds	r3, #48	; 0x30
 8006fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe f9b8 	bl	800534e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d060      	beq.n	80070aa <f_open+0x362>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05c      	beq.n	80070aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	895b      	ldrh	r3, [r3, #10]
 8006ffc:	025b      	lsls	r3, r3, #9
 8006ffe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	657b      	str	r3, [r7, #84]	; 0x54
 800700c:	e016      	b.n	800703c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007012:	4618      	mov	r0, r3
 8007014:	f7fe fc63 	bl	80058de <get_fat>
 8007018:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800701a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800701c:	2b01      	cmp	r3, #1
 800701e:	d802      	bhi.n	8007026 <f_open+0x2de>
 8007020:	2302      	movs	r3, #2
 8007022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d102      	bne.n	8007034 <f_open+0x2ec>
 800702e:	2301      	movs	r3, #1
 8007030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	657b      	str	r3, [r7, #84]	; 0x54
 800703c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <f_open+0x304>
 8007044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007048:	429a      	cmp	r2, r3
 800704a:	d8e0      	bhi.n	800700e <f_open+0x2c6>
				}
				fp->clust = clst;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007050:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007056:	2b00      	cmp	r3, #0
 8007058:	d127      	bne.n	80070aa <f_open+0x362>
 800705a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800705c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007060:	2b00      	cmp	r3, #0
 8007062:	d022      	beq.n	80070aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fc19 	bl	80058a0 <clust2sect>
 800706e:	6478      	str	r0, [r7, #68]	; 0x44
 8007070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007072:	2b00      	cmp	r3, #0
 8007074:	d103      	bne.n	800707e <f_open+0x336>
						res = FR_INT_ERR;
 8007076:	2302      	movs	r3, #2
 8007078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800707c:	e015      	b.n	80070aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800707e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007080:	0a5a      	lsrs	r2, r3, #9
 8007082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	7858      	ldrb	r0, [r3, #1]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	2301      	movs	r3, #1
 800709a:	f7fe f857 	bl	800514c <disk_read>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <f_open+0x362>
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80070aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <f_open+0x370>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80070b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3760      	adds	r7, #96	; 0x60
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08e      	sub	sp, #56	; 0x38
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f107 0214 	add.w	r2, r7, #20
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fdb3 	bl	8006c50 <validate>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d107      	bne.n	8007108 <f_read+0x44>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	7d5b      	ldrb	r3, [r3, #21]
 80070fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <f_read+0x4a>
 8007108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800710c:	e115      	b.n	800733a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	7d1b      	ldrb	r3, [r3, #20]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <f_read+0x5a>
 800711a:	2307      	movs	r3, #7
 800711c:	e10d      	b.n	800733a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	429a      	cmp	r2, r3
 8007130:	f240 80fe 	bls.w	8007330 <f_read+0x26c>
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007138:	e0fa      	b.n	8007330 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 80c6 	bne.w	80072d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	0a5b      	lsrs	r3, r3, #9
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	8952      	ldrh	r2, [r2, #10]
 8007152:	3a01      	subs	r2, #1
 8007154:	4013      	ands	r3, r2
 8007156:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d12f      	bne.n	80071be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	633b      	str	r3, [r7, #48]	; 0x30
 800716c:	e013      	b.n	8007196 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	4619      	mov	r1, r3
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7fe fe3d 	bl	8005dfc <clmt_clust>
 8007182:	6338      	str	r0, [r7, #48]	; 0x30
 8007184:	e007      	b.n	8007196 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4619      	mov	r1, r3
 800718e:	4610      	mov	r0, r2
 8007190:	f7fe fba5 	bl	80058de <get_fat>
 8007194:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	d804      	bhi.n	80071a6 <f_read+0xe2>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2202      	movs	r2, #2
 80071a0:	755a      	strb	r2, [r3, #21]
 80071a2:	2302      	movs	r3, #2
 80071a4:	e0c9      	b.n	800733a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d104      	bne.n	80071b8 <f_read+0xf4>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	755a      	strb	r2, [r3, #21]
 80071b4:	2301      	movs	r3, #1
 80071b6:	e0c0      	b.n	800733a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7fe fb6a 	bl	80058a0 <clust2sect>
 80071cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <f_read+0x11a>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2202      	movs	r2, #2
 80071d8:	755a      	strb	r2, [r3, #21]
 80071da:	2302      	movs	r3, #2
 80071dc:	e0ad      	b.n	800733a <f_read+0x276>
			sect += csect;
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	4413      	add	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	0a5b      	lsrs	r3, r3, #9
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d039      	beq.n	8007266 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	4413      	add	r3, r2
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	8952      	ldrh	r2, [r2, #10]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d905      	bls.n	800720c <f_read+0x148>
					cc = fs->csize - csect;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	895b      	ldrh	r3, [r3, #10]
 8007204:	461a      	mov	r2, r3
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	7858      	ldrb	r0, [r3, #1]
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007216:	f7fd ff99 	bl	800514c <disk_read>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <f_read+0x166>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	755a      	strb	r2, [r3, #21]
 8007226:	2301      	movs	r3, #1
 8007228:	e087      	b.n	800733a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	7d1b      	ldrb	r3, [r3, #20]
 800722e:	b25b      	sxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	da14      	bge.n	800725e <f_read+0x19a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a1a      	ldr	r2, [r3, #32]
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800723e:	429a      	cmp	r2, r3
 8007240:	d90d      	bls.n	800725e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1a      	ldr	r2, [r3, #32]
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	025b      	lsls	r3, r3, #9
 800724c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724e:	18d0      	adds	r0, r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3330      	adds	r3, #48	; 0x30
 8007254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007258:	4619      	mov	r1, r3
 800725a:	f7fe f857 	bl	800530c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	025b      	lsls	r3, r3, #9
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007264:	e050      	b.n	8007308 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	429a      	cmp	r2, r3
 800726e:	d02e      	beq.n	80072ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	7d1b      	ldrb	r3, [r3, #20]
 8007274:	b25b      	sxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	da18      	bge.n	80072ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	7858      	ldrb	r0, [r3, #1]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	2301      	movs	r3, #1
 800728a:	f7fd ff7f 	bl	800518c <disk_write>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <f_read+0x1da>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	755a      	strb	r2, [r3, #21]
 800729a:	2301      	movs	r3, #1
 800729c:	e04d      	b.n	800733a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	7d1b      	ldrb	r3, [r3, #20]
 80072a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	7858      	ldrb	r0, [r3, #1]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072b6:	2301      	movs	r3, #1
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	f7fd ff47 	bl	800514c <disk_read>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <f_read+0x20a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	755a      	strb	r2, [r3, #21]
 80072ca:	2301      	movs	r3, #1
 80072cc:	e035      	b.n	800733a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80072e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d901      	bls.n	80072ee <f_read+0x22a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fc:	4413      	add	r3, r2
 80072fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007300:	4619      	mov	r1, r3
 8007302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007304:	f7fe f802 	bl	800530c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	4413      	add	r3, r2
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	441a      	add	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	619a      	str	r2, [r3, #24]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	441a      	add	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f47f af01 	bne.w	800713a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3738      	adds	r7, #56	; 0x38
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f107 0208 	add.w	r2, r7, #8
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fc7c 	bl	8006c50 <validate>
 8007358:	4603      	mov	r3, r0
 800735a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d168      	bne.n	8007434 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7d1b      	ldrb	r3, [r3, #20]
 8007366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d062      	beq.n	8007434 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7d1b      	ldrb	r3, [r3, #20]
 8007372:	b25b      	sxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	da15      	bge.n	80073a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	7858      	ldrb	r0, [r3, #1]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1a      	ldr	r2, [r3, #32]
 8007386:	2301      	movs	r3, #1
 8007388:	f7fd ff00 	bl	800518c <disk_write>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <f_sync+0x54>
 8007392:	2301      	movs	r3, #1
 8007394:	e04f      	b.n	8007436 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7d1b      	ldrb	r3, [r3, #20]
 800739a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80073a4:	f7fd fcf4 	bl	8004d90 <get_fattime>
 80073a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe f9d8 	bl	8005768 <move_window>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d138      	bne.n	8007434 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	330b      	adds	r3, #11
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	330b      	adds	r3, #11
 80073d2:	f042 0220 	orr.w	r2, r2, #32
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	f7fe fee3 	bl	80061b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f103 021c 	add.w	r2, r3, #28
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4619      	mov	r1, r3
 80073f6:	4610      	mov	r0, r2
 80073f8:	f7fd ff5c 	bl	80052b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3316      	adds	r3, #22
 8007400:	6939      	ldr	r1, [r7, #16]
 8007402:	4618      	mov	r0, r3
 8007404:	f7fd ff56 	bl	80052b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3312      	adds	r3, #18
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f7fd ff35 	bl	800527e <st_word>
					fs->wflag = 1;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2201      	movs	r2, #1
 8007418:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe f9d1 	bl	80057c4 <sync_fs>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	7d1b      	ldrb	r3, [r3, #20]
 800742a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800742e:	b2da      	uxtb	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff ff7b 	bl	8007342 <f_sync>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d118      	bne.n	8007488 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f107 0208 	add.w	r2, r7, #8
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fbf6 	bl	8006c50 <validate>
 8007464:	4603      	mov	r3, r0
 8007466:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe f8d4 	bl	8005620 <dec_lock>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <f_opendir+0x14>
 80074a2:	2309      	movs	r3, #9
 80074a4:	e064      	b.n	8007570 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80074aa:	f107 010c 	add.w	r1, r7, #12
 80074ae:	463b      	mov	r3, r7
 80074b0:	2200      	movs	r2, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff f980 	bl	80067b8 <find_volume>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d14f      	bne.n	8007562 <f_opendir+0xd0>
		obj->fs = fs;
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f867 	bl	80065a0 <follow_path>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d13d      	bne.n	8007558 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074e2:	b25b      	sxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	db12      	blt.n	800750e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	799b      	ldrb	r3, [r3, #6]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f7fe fe38 	bl	8006172 <ld_clust>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	e001      	b.n	800750e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800750a:	2305      	movs	r3, #5
 800750c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d121      	bne.n	8007558 <f_opendir+0xc6>
				obj->id = fs->id;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	88da      	ldrh	r2, [r3, #6]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fe fca0 	bl	8005e64 <dir_sdi>
 8007524:	4603      	mov	r3, r0
 8007526:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d114      	bne.n	8007558 <f_opendir+0xc6>
					if (obj->sclust) {
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00d      	beq.n	8007552 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7fd ffe3 	bl	8005504 <inc_lock>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <f_opendir+0xc6>
 800754c:	2312      	movs	r3, #18
 800754e:	75fb      	strb	r3, [r7, #23]
 8007550:	e002      	b.n	8007558 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2200      	movs	r2, #0
 8007556:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b04      	cmp	r3, #4
 800755c:	d101      	bne.n	8007562 <f_opendir+0xd0>
 800755e:	2305      	movs	r3, #5
 8007560:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007562:	7dfb      	ldrb	r3, [r7, #23]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <f_opendir+0xdc>
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800756e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f107 0208 	add.w	r2, r7, #8
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fb61 	bl	8006c50 <validate>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d110      	bne.n	80075ba <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe f83b 	bl	8005620 <dec_lock>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f107 0208 	add.w	r2, r7, #8
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fb3a 	bl	8006c50 <validate>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d126      	bne.n	8007634 <f_readdir+0x70>
		if (!fno) {
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80075ec:	2100      	movs	r1, #0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fe fc38 	bl	8005e64 <dir_sdi>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]
 80075f8:	e01c      	b.n	8007634 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80075fa:	2100      	movs	r1, #0
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fe fdf7 	bl	80061f0 <dir_read>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d101      	bne.n	8007610 <f_readdir+0x4c>
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10e      	bne.n	8007634 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fe fecd 	bl	80063b8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800761e:	2100      	movs	r1, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fe fc9a 	bl	8005f5a <dir_next>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	2b04      	cmp	r3, #4
 800762e:	d101      	bne.n	8007634 <f_readdir+0x70>
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b090      	sub	sp, #64	; 0x40
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007648:	f107 010c 	add.w	r1, r7, #12
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	2200      	movs	r2, #0
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff f8b1 	bl	80067b8 <find_volume>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800765c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11f      	bne.n	80076a4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	f107 030c 	add.w	r3, r7, #12
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe ff97 	bl	80065a0 <follow_path>
 8007672:	4603      	mov	r3, r0
 8007674:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007678:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800767c:	2b00      	cmp	r3, #0
 800767e:	d111      	bne.n	80076a4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007680:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007684:	b25b      	sxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	da03      	bge.n	8007692 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800768a:	2306      	movs	r3, #6
 800768c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007690:	e008      	b.n	80076a4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <f_stat+0x66>
 8007698:	f107 030c 	add.w	r3, r7, #12
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fe8a 	bl	80063b8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80076a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3740      	adds	r7, #64	; 0x40
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80076be:	2301      	movs	r3, #1
 80076c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80076c6:	4b1f      	ldr	r3, [pc, #124]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 80076c8:	7a5b      	ldrb	r3, [r3, #9]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d131      	bne.n	8007734 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 80076d2:	7a5b      	ldrb	r3, [r3, #9]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 80076da:	2100      	movs	r1, #0
 80076dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80076de:	4b19      	ldr	r3, [pc, #100]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 80076e0:	7a5b      	ldrb	r3, [r3, #9]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	4a17      	ldr	r2, [pc, #92]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80076ee:	4b15      	ldr	r3, [pc, #84]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 80076f0:	7a5b      	ldrb	r3, [r3, #9]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 80076f8:	4413      	add	r3, r2
 80076fa:	79fa      	ldrb	r2, [r7, #7]
 80076fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80076fe:	4b11      	ldr	r3, [pc, #68]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 8007700:	7a5b      	ldrb	r3, [r3, #9]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	b2d1      	uxtb	r1, r2
 8007708:	4a0e      	ldr	r2, [pc, #56]	; (8007744 <FATFS_LinkDriverEx+0x94>)
 800770a:	7251      	strb	r1, [r2, #9]
 800770c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800770e:	7dbb      	ldrb	r3, [r7, #22]
 8007710:	3330      	adds	r3, #48	; 0x30
 8007712:	b2da      	uxtb	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	3301      	adds	r3, #1
 800771c:	223a      	movs	r2, #58	; 0x3a
 800771e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	3302      	adds	r3, #2
 8007724:	222f      	movs	r2, #47	; 0x2f
 8007726:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3303      	adds	r3, #3
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
}
 8007736:	4618      	mov	r0, r3
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	20000a14 	.word	0x20000a14

08007748 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007752:	2200      	movs	r2, #0
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7ff ffaa 	bl	80076b0 <FATFS_LinkDriverEx>
 800775c:	4603      	mov	r3, r0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <calloc>:
 8007768:	4b02      	ldr	r3, [pc, #8]	; (8007774 <calloc+0xc>)
 800776a:	460a      	mov	r2, r1
 800776c:	4601      	mov	r1, r0
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	f000 b802 	b.w	8007778 <_calloc_r>
 8007774:	20000068 	.word	0x20000068

08007778 <_calloc_r>:
 8007778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800777a:	fba1 2402 	umull	r2, r4, r1, r2
 800777e:	b94c      	cbnz	r4, 8007794 <_calloc_r+0x1c>
 8007780:	4611      	mov	r1, r2
 8007782:	9201      	str	r2, [sp, #4]
 8007784:	f000 f83e 	bl	8007804 <_malloc_r>
 8007788:	9a01      	ldr	r2, [sp, #4]
 800778a:	4605      	mov	r5, r0
 800778c:	b930      	cbnz	r0, 800779c <_calloc_r+0x24>
 800778e:	4628      	mov	r0, r5
 8007790:	b003      	add	sp, #12
 8007792:	bd30      	pop	{r4, r5, pc}
 8007794:	220c      	movs	r2, #12
 8007796:	6002      	str	r2, [r0, #0]
 8007798:	2500      	movs	r5, #0
 800779a:	e7f8      	b.n	800778e <_calloc_r+0x16>
 800779c:	4621      	mov	r1, r4
 800779e:	f000 f8dd 	bl	800795c <memset>
 80077a2:	e7f4      	b.n	800778e <_calloc_r+0x16>

080077a4 <malloc>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <malloc+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f000 b82b 	b.w	8007804 <_malloc_r>
 80077ae:	bf00      	nop
 80077b0:	20000068 	.word	0x20000068

080077b4 <free>:
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <free+0xc>)
 80077b6:	4601      	mov	r1, r0
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f000 b913 	b.w	80079e4 <_free_r>
 80077be:	bf00      	nop
 80077c0:	20000068 	.word	0x20000068

080077c4 <sbrk_aligned>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	4e0e      	ldr	r6, [pc, #56]	; (8007800 <sbrk_aligned+0x3c>)
 80077c8:	460c      	mov	r4, r1
 80077ca:	6831      	ldr	r1, [r6, #0]
 80077cc:	4605      	mov	r5, r0
 80077ce:	b911      	cbnz	r1, 80077d6 <sbrk_aligned+0x12>
 80077d0:	f000 f8cc 	bl	800796c <_sbrk_r>
 80077d4:	6030      	str	r0, [r6, #0]
 80077d6:	4621      	mov	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 f8c7 	bl	800796c <_sbrk_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d00a      	beq.n	80077f8 <sbrk_aligned+0x34>
 80077e2:	1cc4      	adds	r4, r0, #3
 80077e4:	f024 0403 	bic.w	r4, r4, #3
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d007      	beq.n	80077fc <sbrk_aligned+0x38>
 80077ec:	1a21      	subs	r1, r4, r0
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f8bc 	bl	800796c <_sbrk_r>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d101      	bne.n	80077fc <sbrk_aligned+0x38>
 80077f8:	f04f 34ff 	mov.w	r4, #4294967295
 80077fc:	4620      	mov	r0, r4
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	20000a24 	.word	0x20000a24

08007804 <_malloc_r>:
 8007804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007808:	1ccd      	adds	r5, r1, #3
 800780a:	f025 0503 	bic.w	r5, r5, #3
 800780e:	3508      	adds	r5, #8
 8007810:	2d0c      	cmp	r5, #12
 8007812:	bf38      	it	cc
 8007814:	250c      	movcc	r5, #12
 8007816:	2d00      	cmp	r5, #0
 8007818:	4607      	mov	r7, r0
 800781a:	db01      	blt.n	8007820 <_malloc_r+0x1c>
 800781c:	42a9      	cmp	r1, r5
 800781e:	d905      	bls.n	800782c <_malloc_r+0x28>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	2600      	movs	r6, #0
 8007826:	4630      	mov	r0, r6
 8007828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007900 <_malloc_r+0xfc>
 8007830:	f000 f868 	bl	8007904 <__malloc_lock>
 8007834:	f8d8 3000 	ldr.w	r3, [r8]
 8007838:	461c      	mov	r4, r3
 800783a:	bb5c      	cbnz	r4, 8007894 <_malloc_r+0x90>
 800783c:	4629      	mov	r1, r5
 800783e:	4638      	mov	r0, r7
 8007840:	f7ff ffc0 	bl	80077c4 <sbrk_aligned>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	4604      	mov	r4, r0
 8007848:	d155      	bne.n	80078f6 <_malloc_r+0xf2>
 800784a:	f8d8 4000 	ldr.w	r4, [r8]
 800784e:	4626      	mov	r6, r4
 8007850:	2e00      	cmp	r6, #0
 8007852:	d145      	bne.n	80078e0 <_malloc_r+0xdc>
 8007854:	2c00      	cmp	r4, #0
 8007856:	d048      	beq.n	80078ea <_malloc_r+0xe6>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	4631      	mov	r1, r6
 800785c:	4638      	mov	r0, r7
 800785e:	eb04 0903 	add.w	r9, r4, r3
 8007862:	f000 f883 	bl	800796c <_sbrk_r>
 8007866:	4581      	cmp	r9, r0
 8007868:	d13f      	bne.n	80078ea <_malloc_r+0xe6>
 800786a:	6821      	ldr	r1, [r4, #0]
 800786c:	1a6d      	subs	r5, r5, r1
 800786e:	4629      	mov	r1, r5
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ffa7 	bl	80077c4 <sbrk_aligned>
 8007876:	3001      	adds	r0, #1
 8007878:	d037      	beq.n	80078ea <_malloc_r+0xe6>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	442b      	add	r3, r5
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	f8d8 3000 	ldr.w	r3, [r8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d038      	beq.n	80078fa <_malloc_r+0xf6>
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	42a2      	cmp	r2, r4
 800788c:	d12b      	bne.n	80078e6 <_malloc_r+0xe2>
 800788e:	2200      	movs	r2, #0
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	e00f      	b.n	80078b4 <_malloc_r+0xb0>
 8007894:	6822      	ldr	r2, [r4, #0]
 8007896:	1b52      	subs	r2, r2, r5
 8007898:	d41f      	bmi.n	80078da <_malloc_r+0xd6>
 800789a:	2a0b      	cmp	r2, #11
 800789c:	d917      	bls.n	80078ce <_malloc_r+0xca>
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	bf18      	it	ne
 80078a6:	6059      	strne	r1, [r3, #4]
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	bf08      	it	eq
 80078ac:	f8c8 1000 	streq.w	r1, [r8]
 80078b0:	5162      	str	r2, [r4, r5]
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	4638      	mov	r0, r7
 80078b6:	f104 060b 	add.w	r6, r4, #11
 80078ba:	f000 f829 	bl	8007910 <__malloc_unlock>
 80078be:	f026 0607 	bic.w	r6, r6, #7
 80078c2:	1d23      	adds	r3, r4, #4
 80078c4:	1af2      	subs	r2, r6, r3
 80078c6:	d0ae      	beq.n	8007826 <_malloc_r+0x22>
 80078c8:	1b9b      	subs	r3, r3, r6
 80078ca:	50a3      	str	r3, [r4, r2]
 80078cc:	e7ab      	b.n	8007826 <_malloc_r+0x22>
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	6862      	ldr	r2, [r4, #4]
 80078d2:	d1dd      	bne.n	8007890 <_malloc_r+0x8c>
 80078d4:	f8c8 2000 	str.w	r2, [r8]
 80078d8:	e7ec      	b.n	80078b4 <_malloc_r+0xb0>
 80078da:	4623      	mov	r3, r4
 80078dc:	6864      	ldr	r4, [r4, #4]
 80078de:	e7ac      	b.n	800783a <_malloc_r+0x36>
 80078e0:	4634      	mov	r4, r6
 80078e2:	6876      	ldr	r6, [r6, #4]
 80078e4:	e7b4      	b.n	8007850 <_malloc_r+0x4c>
 80078e6:	4613      	mov	r3, r2
 80078e8:	e7cc      	b.n	8007884 <_malloc_r+0x80>
 80078ea:	230c      	movs	r3, #12
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4638      	mov	r0, r7
 80078f0:	f000 f80e 	bl	8007910 <__malloc_unlock>
 80078f4:	e797      	b.n	8007826 <_malloc_r+0x22>
 80078f6:	6025      	str	r5, [r4, #0]
 80078f8:	e7dc      	b.n	80078b4 <_malloc_r+0xb0>
 80078fa:	605b      	str	r3, [r3, #4]
 80078fc:	deff      	udf	#255	; 0xff
 80078fe:	bf00      	nop
 8007900:	20000a20 	.word	0x20000a20

08007904 <__malloc_lock>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__malloc_lock+0x8>)
 8007906:	f000 b86b 	b.w	80079e0 <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	20000b64 	.word	0x20000b64

08007910 <__malloc_unlock>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__malloc_unlock+0x8>)
 8007912:	f000 b866 	b.w	80079e2 <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	20000b64 	.word	0x20000b64

0800791c <siprintf>:
 800791c:	b40e      	push	{r1, r2, r3}
 800791e:	b500      	push	{lr}
 8007920:	b09c      	sub	sp, #112	; 0x70
 8007922:	ab1d      	add	r3, sp, #116	; 0x74
 8007924:	9002      	str	r0, [sp, #8]
 8007926:	9006      	str	r0, [sp, #24]
 8007928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800792c:	4809      	ldr	r0, [pc, #36]	; (8007954 <siprintf+0x38>)
 800792e:	9107      	str	r1, [sp, #28]
 8007930:	9104      	str	r1, [sp, #16]
 8007932:	4909      	ldr	r1, [pc, #36]	; (8007958 <siprintf+0x3c>)
 8007934:	f853 2b04 	ldr.w	r2, [r3], #4
 8007938:	9105      	str	r1, [sp, #20]
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	a902      	add	r1, sp, #8
 8007940:	f000 f8f6 	bl	8007b30 <_svfiprintf_r>
 8007944:	9b02      	ldr	r3, [sp, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	b01c      	add	sp, #112	; 0x70
 800794c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007950:	b003      	add	sp, #12
 8007952:	4770      	bx	lr
 8007954:	20000068 	.word	0x20000068
 8007958:	ffff0208 	.word	0xffff0208

0800795c <memset>:
 800795c:	4402      	add	r2, r0
 800795e:	4603      	mov	r3, r0
 8007960:	4293      	cmp	r3, r2
 8007962:	d100      	bne.n	8007966 <memset+0xa>
 8007964:	4770      	bx	lr
 8007966:	f803 1b01 	strb.w	r1, [r3], #1
 800796a:	e7f9      	b.n	8007960 <memset+0x4>

0800796c <_sbrk_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d06      	ldr	r5, [pc, #24]	; (8007988 <_sbrk_r+0x1c>)
 8007970:	2300      	movs	r3, #0
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	f7f9 fdf0 	bl	800155c <_sbrk>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_sbrk_r+0x1a>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	b103      	cbz	r3, 8007986 <_sbrk_r+0x1a>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	20000b60 	.word	0x20000b60

0800798c <__errno>:
 800798c:	4b01      	ldr	r3, [pc, #4]	; (8007994 <__errno+0x8>)
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000068 	.word	0x20000068

08007998 <__libc_init_array>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	4d0d      	ldr	r5, [pc, #52]	; (80079d0 <__libc_init_array+0x38>)
 800799c:	4c0d      	ldr	r4, [pc, #52]	; (80079d4 <__libc_init_array+0x3c>)
 800799e:	1b64      	subs	r4, r4, r5
 80079a0:	10a4      	asrs	r4, r4, #2
 80079a2:	2600      	movs	r6, #0
 80079a4:	42a6      	cmp	r6, r4
 80079a6:	d109      	bne.n	80079bc <__libc_init_array+0x24>
 80079a8:	4d0b      	ldr	r5, [pc, #44]	; (80079d8 <__libc_init_array+0x40>)
 80079aa:	4c0c      	ldr	r4, [pc, #48]	; (80079dc <__libc_init_array+0x44>)
 80079ac:	f000 fbae 	bl	800810c <_init>
 80079b0:	1b64      	subs	r4, r4, r5
 80079b2:	10a4      	asrs	r4, r4, #2
 80079b4:	2600      	movs	r6, #0
 80079b6:	42a6      	cmp	r6, r4
 80079b8:	d105      	bne.n	80079c6 <__libc_init_array+0x2e>
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c0:	4798      	blx	r3
 80079c2:	3601      	adds	r6, #1
 80079c4:	e7ee      	b.n	80079a4 <__libc_init_array+0xc>
 80079c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ca:	4798      	blx	r3
 80079cc:	3601      	adds	r6, #1
 80079ce:	e7f2      	b.n	80079b6 <__libc_init_array+0x1e>
 80079d0:	08009844 	.word	0x08009844
 80079d4:	08009844 	.word	0x08009844
 80079d8:	08009844 	.word	0x08009844
 80079dc:	08009848 	.word	0x08009848

080079e0 <__retarget_lock_acquire_recursive>:
 80079e0:	4770      	bx	lr

080079e2 <__retarget_lock_release_recursive>:
 80079e2:	4770      	bx	lr

080079e4 <_free_r>:
 80079e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079e6:	2900      	cmp	r1, #0
 80079e8:	d044      	beq.n	8007a74 <_free_r+0x90>
 80079ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ee:	9001      	str	r0, [sp, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f1a1 0404 	sub.w	r4, r1, #4
 80079f6:	bfb8      	it	lt
 80079f8:	18e4      	addlt	r4, r4, r3
 80079fa:	f7ff ff83 	bl	8007904 <__malloc_lock>
 80079fe:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <_free_r+0x94>)
 8007a00:	9801      	ldr	r0, [sp, #4]
 8007a02:	6813      	ldr	r3, [r2, #0]
 8007a04:	b933      	cbnz	r3, 8007a14 <_free_r+0x30>
 8007a06:	6063      	str	r3, [r4, #4]
 8007a08:	6014      	str	r4, [r2, #0]
 8007a0a:	b003      	add	sp, #12
 8007a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a10:	f7ff bf7e 	b.w	8007910 <__malloc_unlock>
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	d908      	bls.n	8007a2a <_free_r+0x46>
 8007a18:	6825      	ldr	r5, [r4, #0]
 8007a1a:	1961      	adds	r1, r4, r5
 8007a1c:	428b      	cmp	r3, r1
 8007a1e:	bf01      	itttt	eq
 8007a20:	6819      	ldreq	r1, [r3, #0]
 8007a22:	685b      	ldreq	r3, [r3, #4]
 8007a24:	1949      	addeq	r1, r1, r5
 8007a26:	6021      	streq	r1, [r4, #0]
 8007a28:	e7ed      	b.n	8007a06 <_free_r+0x22>
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	b10b      	cbz	r3, 8007a34 <_free_r+0x50>
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d9fa      	bls.n	8007a2a <_free_r+0x46>
 8007a34:	6811      	ldr	r1, [r2, #0]
 8007a36:	1855      	adds	r5, r2, r1
 8007a38:	42a5      	cmp	r5, r4
 8007a3a:	d10b      	bne.n	8007a54 <_free_r+0x70>
 8007a3c:	6824      	ldr	r4, [r4, #0]
 8007a3e:	4421      	add	r1, r4
 8007a40:	1854      	adds	r4, r2, r1
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	d1e0      	bne.n	8007a0a <_free_r+0x26>
 8007a48:	681c      	ldr	r4, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	6053      	str	r3, [r2, #4]
 8007a4e:	440c      	add	r4, r1
 8007a50:	6014      	str	r4, [r2, #0]
 8007a52:	e7da      	b.n	8007a0a <_free_r+0x26>
 8007a54:	d902      	bls.n	8007a5c <_free_r+0x78>
 8007a56:	230c      	movs	r3, #12
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	e7d6      	b.n	8007a0a <_free_r+0x26>
 8007a5c:	6825      	ldr	r5, [r4, #0]
 8007a5e:	1961      	adds	r1, r4, r5
 8007a60:	428b      	cmp	r3, r1
 8007a62:	bf04      	itt	eq
 8007a64:	6819      	ldreq	r1, [r3, #0]
 8007a66:	685b      	ldreq	r3, [r3, #4]
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	bf04      	itt	eq
 8007a6c:	1949      	addeq	r1, r1, r5
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	6054      	str	r4, [r2, #4]
 8007a72:	e7ca      	b.n	8007a0a <_free_r+0x26>
 8007a74:	b003      	add	sp, #12
 8007a76:	bd30      	pop	{r4, r5, pc}
 8007a78:	20000a20 	.word	0x20000a20

08007a7c <__ssputs_r>:
 8007a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a80:	688e      	ldr	r6, [r1, #8]
 8007a82:	461f      	mov	r7, r3
 8007a84:	42be      	cmp	r6, r7
 8007a86:	680b      	ldr	r3, [r1, #0]
 8007a88:	4682      	mov	sl, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	4690      	mov	r8, r2
 8007a8e:	d82c      	bhi.n	8007aea <__ssputs_r+0x6e>
 8007a90:	898a      	ldrh	r2, [r1, #12]
 8007a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a96:	d026      	beq.n	8007ae6 <__ssputs_r+0x6a>
 8007a98:	6965      	ldr	r5, [r4, #20]
 8007a9a:	6909      	ldr	r1, [r1, #16]
 8007a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aa0:	eba3 0901 	sub.w	r9, r3, r1
 8007aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aa8:	1c7b      	adds	r3, r7, #1
 8007aaa:	444b      	add	r3, r9
 8007aac:	106d      	asrs	r5, r5, #1
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	bf38      	it	cc
 8007ab2:	461d      	movcc	r5, r3
 8007ab4:	0553      	lsls	r3, r2, #21
 8007ab6:	d527      	bpl.n	8007b08 <__ssputs_r+0x8c>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7ff fea3 	bl	8007804 <_malloc_r>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	b360      	cbz	r0, 8007b1c <__ssputs_r+0xa0>
 8007ac2:	6921      	ldr	r1, [r4, #16]
 8007ac4:	464a      	mov	r2, r9
 8007ac6:	f000 fadb 	bl	8008080 <memcpy>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	6126      	str	r6, [r4, #16]
 8007ad8:	6165      	str	r5, [r4, #20]
 8007ada:	444e      	add	r6, r9
 8007adc:	eba5 0509 	sub.w	r5, r5, r9
 8007ae0:	6026      	str	r6, [r4, #0]
 8007ae2:	60a5      	str	r5, [r4, #8]
 8007ae4:	463e      	mov	r6, r7
 8007ae6:	42be      	cmp	r6, r7
 8007ae8:	d900      	bls.n	8007aec <__ssputs_r+0x70>
 8007aea:	463e      	mov	r6, r7
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	4632      	mov	r2, r6
 8007af0:	4641      	mov	r1, r8
 8007af2:	f000 faab 	bl	800804c <memmove>
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	1b9b      	subs	r3, r3, r6
 8007afa:	60a3      	str	r3, [r4, #8]
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	4433      	add	r3, r6
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	2000      	movs	r0, #0
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	462a      	mov	r2, r5
 8007b0a:	f000 fac7 	bl	800809c <_realloc_r>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d1e0      	bne.n	8007ad6 <__ssputs_r+0x5a>
 8007b14:	6921      	ldr	r1, [r4, #16]
 8007b16:	4650      	mov	r0, sl
 8007b18:	f7ff ff64 	bl	80079e4 <_free_r>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	f8ca 3000 	str.w	r3, [sl]
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2e:	e7e9      	b.n	8007b04 <__ssputs_r+0x88>

08007b30 <_svfiprintf_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	4698      	mov	r8, r3
 8007b36:	898b      	ldrh	r3, [r1, #12]
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	b09d      	sub	sp, #116	; 0x74
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	d50e      	bpl.n	8007b62 <_svfiprintf_r+0x32>
 8007b44:	690b      	ldr	r3, [r1, #16]
 8007b46:	b963      	cbnz	r3, 8007b62 <_svfiprintf_r+0x32>
 8007b48:	2140      	movs	r1, #64	; 0x40
 8007b4a:	f7ff fe5b 	bl	8007804 <_malloc_r>
 8007b4e:	6028      	str	r0, [r5, #0]
 8007b50:	6128      	str	r0, [r5, #16]
 8007b52:	b920      	cbnz	r0, 8007b5e <_svfiprintf_r+0x2e>
 8007b54:	230c      	movs	r3, #12
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e0d0      	b.n	8007d00 <_svfiprintf_r+0x1d0>
 8007b5e:	2340      	movs	r3, #64	; 0x40
 8007b60:	616b      	str	r3, [r5, #20]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9309      	str	r3, [sp, #36]	; 0x24
 8007b66:	2320      	movs	r3, #32
 8007b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b70:	2330      	movs	r3, #48	; 0x30
 8007b72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d18 <_svfiprintf_r+0x1e8>
 8007b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b7a:	f04f 0901 	mov.w	r9, #1
 8007b7e:	4623      	mov	r3, r4
 8007b80:	469a      	mov	sl, r3
 8007b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b86:	b10a      	cbz	r2, 8007b8c <_svfiprintf_r+0x5c>
 8007b88:	2a25      	cmp	r2, #37	; 0x25
 8007b8a:	d1f9      	bne.n	8007b80 <_svfiprintf_r+0x50>
 8007b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b90:	d00b      	beq.n	8007baa <_svfiprintf_r+0x7a>
 8007b92:	465b      	mov	r3, fp
 8007b94:	4622      	mov	r2, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff ff6f 	bl	8007a7c <__ssputs_r>
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f000 80a9 	beq.w	8007cf6 <_svfiprintf_r+0x1c6>
 8007ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba6:	445a      	add	r2, fp
 8007ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8007baa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80a1 	beq.w	8007cf6 <_svfiprintf_r+0x1c6>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bbe:	f10a 0a01 	add.w	sl, sl, #1
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	9307      	str	r3, [sp, #28]
 8007bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bca:	931a      	str	r3, [sp, #104]	; 0x68
 8007bcc:	4654      	mov	r4, sl
 8007bce:	2205      	movs	r2, #5
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	4850      	ldr	r0, [pc, #320]	; (8007d18 <_svfiprintf_r+0x1e8>)
 8007bd6:	f7f8 fb13 	bl	8000200 <memchr>
 8007bda:	9a04      	ldr	r2, [sp, #16]
 8007bdc:	b9d8      	cbnz	r0, 8007c16 <_svfiprintf_r+0xe6>
 8007bde:	06d0      	lsls	r0, r2, #27
 8007be0:	bf44      	itt	mi
 8007be2:	2320      	movmi	r3, #32
 8007be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be8:	0711      	lsls	r1, r2, #28
 8007bea:	bf44      	itt	mi
 8007bec:	232b      	movmi	r3, #43	; 0x2b
 8007bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf8:	d015      	beq.n	8007c26 <_svfiprintf_r+0xf6>
 8007bfa:	9a07      	ldr	r2, [sp, #28]
 8007bfc:	4654      	mov	r4, sl
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	4621      	mov	r1, r4
 8007c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0a:	3b30      	subs	r3, #48	; 0x30
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d94d      	bls.n	8007cac <_svfiprintf_r+0x17c>
 8007c10:	b1b0      	cbz	r0, 8007c40 <_svfiprintf_r+0x110>
 8007c12:	9207      	str	r2, [sp, #28]
 8007c14:	e014      	b.n	8007c40 <_svfiprintf_r+0x110>
 8007c16:	eba0 0308 	sub.w	r3, r0, r8
 8007c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	46a2      	mov	sl, r4
 8007c24:	e7d2      	b.n	8007bcc <_svfiprintf_r+0x9c>
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	9103      	str	r1, [sp, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfbb      	ittet	lt
 8007c32:	425b      	neglt	r3, r3
 8007c34:	f042 0202 	orrlt.w	r2, r2, #2
 8007c38:	9307      	strge	r3, [sp, #28]
 8007c3a:	9307      	strlt	r3, [sp, #28]
 8007c3c:	bfb8      	it	lt
 8007c3e:	9204      	strlt	r2, [sp, #16]
 8007c40:	7823      	ldrb	r3, [r4, #0]
 8007c42:	2b2e      	cmp	r3, #46	; 0x2e
 8007c44:	d10c      	bne.n	8007c60 <_svfiprintf_r+0x130>
 8007c46:	7863      	ldrb	r3, [r4, #1]
 8007c48:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4a:	d134      	bne.n	8007cb6 <_svfiprintf_r+0x186>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	9203      	str	r2, [sp, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfb8      	it	lt
 8007c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c5c:	3402      	adds	r4, #2
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d28 <_svfiprintf_r+0x1f8>
 8007c64:	7821      	ldrb	r1, [r4, #0]
 8007c66:	2203      	movs	r2, #3
 8007c68:	4650      	mov	r0, sl
 8007c6a:	f7f8 fac9 	bl	8000200 <memchr>
 8007c6e:	b138      	cbz	r0, 8007c80 <_svfiprintf_r+0x150>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	eba0 000a 	sub.w	r0, r0, sl
 8007c76:	2240      	movs	r2, #64	; 0x40
 8007c78:	4082      	lsls	r2, r0
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	3401      	adds	r4, #1
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c84:	4825      	ldr	r0, [pc, #148]	; (8007d1c <_svfiprintf_r+0x1ec>)
 8007c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c8a:	2206      	movs	r2, #6
 8007c8c:	f7f8 fab8 	bl	8000200 <memchr>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d038      	beq.n	8007d06 <_svfiprintf_r+0x1d6>
 8007c94:	4b22      	ldr	r3, [pc, #136]	; (8007d20 <_svfiprintf_r+0x1f0>)
 8007c96:	bb1b      	cbnz	r3, 8007ce0 <_svfiprintf_r+0x1b0>
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	3307      	adds	r3, #7
 8007c9c:	f023 0307 	bic.w	r3, r3, #7
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	9303      	str	r3, [sp, #12]
 8007ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca6:	4433      	add	r3, r6
 8007ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8007caa:	e768      	b.n	8007b7e <_svfiprintf_r+0x4e>
 8007cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	e7a6      	b.n	8007c04 <_svfiprintf_r+0xd4>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	3401      	adds	r4, #1
 8007cba:	9305      	str	r3, [sp, #20]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f04f 0c0a 	mov.w	ip, #10
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc8:	3a30      	subs	r2, #48	; 0x30
 8007cca:	2a09      	cmp	r2, #9
 8007ccc:	d903      	bls.n	8007cd6 <_svfiprintf_r+0x1a6>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0c6      	beq.n	8007c60 <_svfiprintf_r+0x130>
 8007cd2:	9105      	str	r1, [sp, #20]
 8007cd4:	e7c4      	b.n	8007c60 <_svfiprintf_r+0x130>
 8007cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cda:	4604      	mov	r4, r0
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e7f0      	b.n	8007cc2 <_svfiprintf_r+0x192>
 8007ce0:	ab03      	add	r3, sp, #12
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <_svfiprintf_r+0x1f4>)
 8007ce8:	a904      	add	r1, sp, #16
 8007cea:	4638      	mov	r0, r7
 8007cec:	f3af 8000 	nop.w
 8007cf0:	1c42      	adds	r2, r0, #1
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	d1d6      	bne.n	8007ca4 <_svfiprintf_r+0x174>
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	065b      	lsls	r3, r3, #25
 8007cfa:	f53f af2d 	bmi.w	8007b58 <_svfiprintf_r+0x28>
 8007cfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d00:	b01d      	add	sp, #116	; 0x74
 8007d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d06:	ab03      	add	r3, sp, #12
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	462a      	mov	r2, r5
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <_svfiprintf_r+0x1f4>)
 8007d0e:	a904      	add	r1, sp, #16
 8007d10:	4638      	mov	r0, r7
 8007d12:	f000 f879 	bl	8007e08 <_printf_i>
 8007d16:	e7eb      	b.n	8007cf0 <_svfiprintf_r+0x1c0>
 8007d18:	08009808 	.word	0x08009808
 8007d1c:	08009812 	.word	0x08009812
 8007d20:	00000000 	.word	0x00000000
 8007d24:	08007a7d 	.word	0x08007a7d
 8007d28:	0800980e 	.word	0x0800980e

08007d2c <_printf_common>:
 8007d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	4616      	mov	r6, r2
 8007d32:	4699      	mov	r9, r3
 8007d34:	688a      	ldr	r2, [r1, #8]
 8007d36:	690b      	ldr	r3, [r1, #16]
 8007d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bfb8      	it	lt
 8007d40:	4613      	movlt	r3, r2
 8007d42:	6033      	str	r3, [r6, #0]
 8007d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d48:	4607      	mov	r7, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b10a      	cbz	r2, 8007d52 <_printf_common+0x26>
 8007d4e:	3301      	adds	r3, #1
 8007d50:	6033      	str	r3, [r6, #0]
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	0699      	lsls	r1, r3, #26
 8007d56:	bf42      	ittt	mi
 8007d58:	6833      	ldrmi	r3, [r6, #0]
 8007d5a:	3302      	addmi	r3, #2
 8007d5c:	6033      	strmi	r3, [r6, #0]
 8007d5e:	6825      	ldr	r5, [r4, #0]
 8007d60:	f015 0506 	ands.w	r5, r5, #6
 8007d64:	d106      	bne.n	8007d74 <_printf_common+0x48>
 8007d66:	f104 0a19 	add.w	sl, r4, #25
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	6832      	ldr	r2, [r6, #0]
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	dc26      	bgt.n	8007dc2 <_printf_common+0x96>
 8007d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d78:	1e13      	subs	r3, r2, #0
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	bf18      	it	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	0692      	lsls	r2, r2, #26
 8007d82:	d42b      	bmi.n	8007ddc <_printf_common+0xb0>
 8007d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d88:	4649      	mov	r1, r9
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c0      	blx	r8
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d01e      	beq.n	8007dd0 <_printf_common+0xa4>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	6922      	ldr	r2, [r4, #16]
 8007d96:	f003 0306 	and.w	r3, r3, #6
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	bf02      	ittt	eq
 8007d9e:	68e5      	ldreq	r5, [r4, #12]
 8007da0:	6833      	ldreq	r3, [r6, #0]
 8007da2:	1aed      	subeq	r5, r5, r3
 8007da4:	68a3      	ldr	r3, [r4, #8]
 8007da6:	bf0c      	ite	eq
 8007da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dac:	2500      	movne	r5, #0
 8007dae:	4293      	cmp	r3, r2
 8007db0:	bfc4      	itt	gt
 8007db2:	1a9b      	subgt	r3, r3, r2
 8007db4:	18ed      	addgt	r5, r5, r3
 8007db6:	2600      	movs	r6, #0
 8007db8:	341a      	adds	r4, #26
 8007dba:	42b5      	cmp	r5, r6
 8007dbc:	d11a      	bne.n	8007df4 <_printf_common+0xc8>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e008      	b.n	8007dd4 <_printf_common+0xa8>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	4638      	mov	r0, r7
 8007dca:	47c0      	blx	r8
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d103      	bne.n	8007dd8 <_printf_common+0xac>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd8:	3501      	adds	r5, #1
 8007dda:	e7c6      	b.n	8007d6a <_printf_common+0x3e>
 8007ddc:	18e1      	adds	r1, r4, r3
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	2030      	movs	r0, #48	; 0x30
 8007de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007de6:	4422      	add	r2, r4
 8007de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007df0:	3302      	adds	r3, #2
 8007df2:	e7c7      	b.n	8007d84 <_printf_common+0x58>
 8007df4:	2301      	movs	r3, #1
 8007df6:	4622      	mov	r2, r4
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	47c0      	blx	r8
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d0e6      	beq.n	8007dd0 <_printf_common+0xa4>
 8007e02:	3601      	adds	r6, #1
 8007e04:	e7d9      	b.n	8007dba <_printf_common+0x8e>
	...

08007e08 <_printf_i>:
 8007e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e0c:	7e0f      	ldrb	r7, [r1, #24]
 8007e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e10:	2f78      	cmp	r7, #120	; 0x78
 8007e12:	4691      	mov	r9, r2
 8007e14:	4680      	mov	r8, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	469a      	mov	sl, r3
 8007e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e1e:	d807      	bhi.n	8007e30 <_printf_i+0x28>
 8007e20:	2f62      	cmp	r7, #98	; 0x62
 8007e22:	d80a      	bhi.n	8007e3a <_printf_i+0x32>
 8007e24:	2f00      	cmp	r7, #0
 8007e26:	f000 80d4 	beq.w	8007fd2 <_printf_i+0x1ca>
 8007e2a:	2f58      	cmp	r7, #88	; 0x58
 8007e2c:	f000 80c0 	beq.w	8007fb0 <_printf_i+0x1a8>
 8007e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e38:	e03a      	b.n	8007eb0 <_printf_i+0xa8>
 8007e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e3e:	2b15      	cmp	r3, #21
 8007e40:	d8f6      	bhi.n	8007e30 <_printf_i+0x28>
 8007e42:	a101      	add	r1, pc, #4	; (adr r1, 8007e48 <_printf_i+0x40>)
 8007e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e48:	08007ea1 	.word	0x08007ea1
 8007e4c:	08007eb5 	.word	0x08007eb5
 8007e50:	08007e31 	.word	0x08007e31
 8007e54:	08007e31 	.word	0x08007e31
 8007e58:	08007e31 	.word	0x08007e31
 8007e5c:	08007e31 	.word	0x08007e31
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08007e31 	.word	0x08007e31
 8007e68:	08007e31 	.word	0x08007e31
 8007e6c:	08007e31 	.word	0x08007e31
 8007e70:	08007e31 	.word	0x08007e31
 8007e74:	08007fb9 	.word	0x08007fb9
 8007e78:	08007ee1 	.word	0x08007ee1
 8007e7c:	08007f73 	.word	0x08007f73
 8007e80:	08007e31 	.word	0x08007e31
 8007e84:	08007e31 	.word	0x08007e31
 8007e88:	08007fdb 	.word	0x08007fdb
 8007e8c:	08007e31 	.word	0x08007e31
 8007e90:	08007ee1 	.word	0x08007ee1
 8007e94:	08007e31 	.word	0x08007e31
 8007e98:	08007e31 	.word	0x08007e31
 8007e9c:	08007f7b 	.word	0x08007f7b
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	1d1a      	adds	r2, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	602a      	str	r2, [r5, #0]
 8007ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e09f      	b.n	8007ff4 <_printf_i+0x1ec>
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	682b      	ldr	r3, [r5, #0]
 8007eb8:	0607      	lsls	r7, r0, #24
 8007eba:	f103 0104 	add.w	r1, r3, #4
 8007ebe:	6029      	str	r1, [r5, #0]
 8007ec0:	d501      	bpl.n	8007ec6 <_printf_i+0xbe>
 8007ec2:	681e      	ldr	r6, [r3, #0]
 8007ec4:	e003      	b.n	8007ece <_printf_i+0xc6>
 8007ec6:	0646      	lsls	r6, r0, #25
 8007ec8:	d5fb      	bpl.n	8007ec2 <_printf_i+0xba>
 8007eca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ece:	2e00      	cmp	r6, #0
 8007ed0:	da03      	bge.n	8007eda <_printf_i+0xd2>
 8007ed2:	232d      	movs	r3, #45	; 0x2d
 8007ed4:	4276      	negs	r6, r6
 8007ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eda:	485a      	ldr	r0, [pc, #360]	; (8008044 <_printf_i+0x23c>)
 8007edc:	230a      	movs	r3, #10
 8007ede:	e012      	b.n	8007f06 <_printf_i+0xfe>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	1d19      	adds	r1, r3, #4
 8007ee6:	6029      	str	r1, [r5, #0]
 8007ee8:	0605      	lsls	r5, r0, #24
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0xe8>
 8007eec:	681e      	ldr	r6, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <_printf_i+0xee>
 8007ef0:	0641      	lsls	r1, r0, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0xe4>
 8007ef4:	881e      	ldrh	r6, [r3, #0]
 8007ef6:	4853      	ldr	r0, [pc, #332]	; (8008044 <_printf_i+0x23c>)
 8007ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8007efa:	bf0c      	ite	eq
 8007efc:	2308      	moveq	r3, #8
 8007efe:	230a      	movne	r3, #10
 8007f00:	2100      	movs	r1, #0
 8007f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f06:	6865      	ldr	r5, [r4, #4]
 8007f08:	60a5      	str	r5, [r4, #8]
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	bfa2      	ittt	ge
 8007f0e:	6821      	ldrge	r1, [r4, #0]
 8007f10:	f021 0104 	bicge.w	r1, r1, #4
 8007f14:	6021      	strge	r1, [r4, #0]
 8007f16:	b90e      	cbnz	r6, 8007f1c <_printf_i+0x114>
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	d04b      	beq.n	8007fb4 <_printf_i+0x1ac>
 8007f1c:	4615      	mov	r5, r2
 8007f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f22:	fb03 6711 	mls	r7, r3, r1, r6
 8007f26:	5dc7      	ldrb	r7, [r0, r7]
 8007f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f2c:	4637      	mov	r7, r6
 8007f2e:	42bb      	cmp	r3, r7
 8007f30:	460e      	mov	r6, r1
 8007f32:	d9f4      	bls.n	8007f1e <_printf_i+0x116>
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d10b      	bne.n	8007f50 <_printf_i+0x148>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	07de      	lsls	r6, r3, #31
 8007f3c:	d508      	bpl.n	8007f50 <_printf_i+0x148>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	6861      	ldr	r1, [r4, #4]
 8007f42:	4299      	cmp	r1, r3
 8007f44:	bfde      	ittt	le
 8007f46:	2330      	movle	r3, #48	; 0x30
 8007f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f50:	1b52      	subs	r2, r2, r5
 8007f52:	6122      	str	r2, [r4, #16]
 8007f54:	f8cd a000 	str.w	sl, [sp]
 8007f58:	464b      	mov	r3, r9
 8007f5a:	aa03      	add	r2, sp, #12
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4640      	mov	r0, r8
 8007f60:	f7ff fee4 	bl	8007d2c <_printf_common>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d14a      	bne.n	8007ffe <_printf_i+0x1f6>
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	b004      	add	sp, #16
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	f043 0320 	orr.w	r3, r3, #32
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	4833      	ldr	r0, [pc, #204]	; (8008048 <_printf_i+0x240>)
 8007f7c:	2778      	movs	r7, #120	; 0x78
 8007f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	6829      	ldr	r1, [r5, #0]
 8007f86:	061f      	lsls	r7, r3, #24
 8007f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f8c:	d402      	bmi.n	8007f94 <_printf_i+0x18c>
 8007f8e:	065f      	lsls	r7, r3, #25
 8007f90:	bf48      	it	mi
 8007f92:	b2b6      	uxthmi	r6, r6
 8007f94:	07df      	lsls	r7, r3, #31
 8007f96:	bf48      	it	mi
 8007f98:	f043 0320 	orrmi.w	r3, r3, #32
 8007f9c:	6029      	str	r1, [r5, #0]
 8007f9e:	bf48      	it	mi
 8007fa0:	6023      	strmi	r3, [r4, #0]
 8007fa2:	b91e      	cbnz	r6, 8007fac <_printf_i+0x1a4>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	f023 0320 	bic.w	r3, r3, #32
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	2310      	movs	r3, #16
 8007fae:	e7a7      	b.n	8007f00 <_printf_i+0xf8>
 8007fb0:	4824      	ldr	r0, [pc, #144]	; (8008044 <_printf_i+0x23c>)
 8007fb2:	e7e4      	b.n	8007f7e <_printf_i+0x176>
 8007fb4:	4615      	mov	r5, r2
 8007fb6:	e7bd      	b.n	8007f34 <_printf_i+0x12c>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	6826      	ldr	r6, [r4, #0]
 8007fbc:	6961      	ldr	r1, [r4, #20]
 8007fbe:	1d18      	adds	r0, r3, #4
 8007fc0:	6028      	str	r0, [r5, #0]
 8007fc2:	0635      	lsls	r5, r6, #24
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	d501      	bpl.n	8007fcc <_printf_i+0x1c4>
 8007fc8:	6019      	str	r1, [r3, #0]
 8007fca:	e002      	b.n	8007fd2 <_printf_i+0x1ca>
 8007fcc:	0670      	lsls	r0, r6, #25
 8007fce:	d5fb      	bpl.n	8007fc8 <_printf_i+0x1c0>
 8007fd0:	8019      	strh	r1, [r3, #0]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	4615      	mov	r5, r2
 8007fd8:	e7bc      	b.n	8007f54 <_printf_i+0x14c>
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	1d1a      	adds	r2, r3, #4
 8007fde:	602a      	str	r2, [r5, #0]
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	6862      	ldr	r2, [r4, #4]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7f8 f90a 	bl	8000200 <memchr>
 8007fec:	b108      	cbz	r0, 8007ff2 <_printf_i+0x1ea>
 8007fee:	1b40      	subs	r0, r0, r5
 8007ff0:	6060      	str	r0, [r4, #4]
 8007ff2:	6863      	ldr	r3, [r4, #4]
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ffc:	e7aa      	b.n	8007f54 <_printf_i+0x14c>
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	462a      	mov	r2, r5
 8008002:	4649      	mov	r1, r9
 8008004:	4640      	mov	r0, r8
 8008006:	47d0      	blx	sl
 8008008:	3001      	adds	r0, #1
 800800a:	d0ad      	beq.n	8007f68 <_printf_i+0x160>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	079b      	lsls	r3, r3, #30
 8008010:	d413      	bmi.n	800803a <_printf_i+0x232>
 8008012:	68e0      	ldr	r0, [r4, #12]
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	4298      	cmp	r0, r3
 8008018:	bfb8      	it	lt
 800801a:	4618      	movlt	r0, r3
 800801c:	e7a6      	b.n	8007f6c <_printf_i+0x164>
 800801e:	2301      	movs	r3, #1
 8008020:	4632      	mov	r2, r6
 8008022:	4649      	mov	r1, r9
 8008024:	4640      	mov	r0, r8
 8008026:	47d0      	blx	sl
 8008028:	3001      	adds	r0, #1
 800802a:	d09d      	beq.n	8007f68 <_printf_i+0x160>
 800802c:	3501      	adds	r5, #1
 800802e:	68e3      	ldr	r3, [r4, #12]
 8008030:	9903      	ldr	r1, [sp, #12]
 8008032:	1a5b      	subs	r3, r3, r1
 8008034:	42ab      	cmp	r3, r5
 8008036:	dcf2      	bgt.n	800801e <_printf_i+0x216>
 8008038:	e7eb      	b.n	8008012 <_printf_i+0x20a>
 800803a:	2500      	movs	r5, #0
 800803c:	f104 0619 	add.w	r6, r4, #25
 8008040:	e7f5      	b.n	800802e <_printf_i+0x226>
 8008042:	bf00      	nop
 8008044:	08009819 	.word	0x08009819
 8008048:	0800982a 	.word	0x0800982a

0800804c <memmove>:
 800804c:	4288      	cmp	r0, r1
 800804e:	b510      	push	{r4, lr}
 8008050:	eb01 0402 	add.w	r4, r1, r2
 8008054:	d902      	bls.n	800805c <memmove+0x10>
 8008056:	4284      	cmp	r4, r0
 8008058:	4623      	mov	r3, r4
 800805a:	d807      	bhi.n	800806c <memmove+0x20>
 800805c:	1e43      	subs	r3, r0, #1
 800805e:	42a1      	cmp	r1, r4
 8008060:	d008      	beq.n	8008074 <memmove+0x28>
 8008062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800806a:	e7f8      	b.n	800805e <memmove+0x12>
 800806c:	4402      	add	r2, r0
 800806e:	4601      	mov	r1, r0
 8008070:	428a      	cmp	r2, r1
 8008072:	d100      	bne.n	8008076 <memmove+0x2a>
 8008074:	bd10      	pop	{r4, pc}
 8008076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800807a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800807e:	e7f7      	b.n	8008070 <memmove+0x24>

08008080 <memcpy>:
 8008080:	440a      	add	r2, r1
 8008082:	4291      	cmp	r1, r2
 8008084:	f100 33ff 	add.w	r3, r0, #4294967295
 8008088:	d100      	bne.n	800808c <memcpy+0xc>
 800808a:	4770      	bx	lr
 800808c:	b510      	push	{r4, lr}
 800808e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008096:	4291      	cmp	r1, r2
 8008098:	d1f9      	bne.n	800808e <memcpy+0xe>
 800809a:	bd10      	pop	{r4, pc}

0800809c <_realloc_r>:
 800809c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	4680      	mov	r8, r0
 80080a2:	4614      	mov	r4, r2
 80080a4:	460e      	mov	r6, r1
 80080a6:	b921      	cbnz	r1, 80080b2 <_realloc_r+0x16>
 80080a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ac:	4611      	mov	r1, r2
 80080ae:	f7ff bba9 	b.w	8007804 <_malloc_r>
 80080b2:	b92a      	cbnz	r2, 80080c0 <_realloc_r+0x24>
 80080b4:	f7ff fc96 	bl	80079e4 <_free_r>
 80080b8:	4625      	mov	r5, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c0:	f000 f81b 	bl	80080fa <_malloc_usable_size_r>
 80080c4:	4284      	cmp	r4, r0
 80080c6:	4607      	mov	r7, r0
 80080c8:	d802      	bhi.n	80080d0 <_realloc_r+0x34>
 80080ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080ce:	d812      	bhi.n	80080f6 <_realloc_r+0x5a>
 80080d0:	4621      	mov	r1, r4
 80080d2:	4640      	mov	r0, r8
 80080d4:	f7ff fb96 	bl	8007804 <_malloc_r>
 80080d8:	4605      	mov	r5, r0
 80080da:	2800      	cmp	r0, #0
 80080dc:	d0ed      	beq.n	80080ba <_realloc_r+0x1e>
 80080de:	42bc      	cmp	r4, r7
 80080e0:	4622      	mov	r2, r4
 80080e2:	4631      	mov	r1, r6
 80080e4:	bf28      	it	cs
 80080e6:	463a      	movcs	r2, r7
 80080e8:	f7ff ffca 	bl	8008080 <memcpy>
 80080ec:	4631      	mov	r1, r6
 80080ee:	4640      	mov	r0, r8
 80080f0:	f7ff fc78 	bl	80079e4 <_free_r>
 80080f4:	e7e1      	b.n	80080ba <_realloc_r+0x1e>
 80080f6:	4635      	mov	r5, r6
 80080f8:	e7df      	b.n	80080ba <_realloc_r+0x1e>

080080fa <_malloc_usable_size_r>:
 80080fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fe:	1f18      	subs	r0, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfbc      	itt	lt
 8008104:	580b      	ldrlt	r3, [r1, r0]
 8008106:	18c0      	addlt	r0, r0, r3
 8008108:	4770      	bx	lr
	...

0800810c <_init>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	bf00      	nop
 8008110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008112:	bc08      	pop	{r3}
 8008114:	469e      	mov	lr, r3
 8008116:	4770      	bx	lr

08008118 <_fini>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	bf00      	nop
 800811c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811e:	bc08      	pop	{r3}
 8008120:	469e      	mov	lr, r3
 8008122:	4770      	bx	lr
